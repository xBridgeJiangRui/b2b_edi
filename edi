<?php

defined('BASEPATH') or exit('No direct script access allowed');
require APPPATH . '/libraries/REST_Controller.php';
class Edi extends REST_controller
{

    public function __construct()
    {
        parent::__construct();
        $this->load->model('lite_b2b_model');
        $this->load->model('lite_b2b_update_model');
        $this->load->model('lite_b2b_insert_model');
        $this->load->model('general_model');
        $this->load->library('session');
        $this->load->helper('url');
        $this->internal_ip = $this->lite_b2b_model->get_filepath_config('web', 'general_doc', 'general_internal_ip', 'GIP')->row('value');
    }

    public function index_post()
    {

        $AppPOST = json_decode(file_get_contents('php://input'), true);
        $username = $this->input->post('username');
        $password = $this->input->post('password');

        // $db = $this->lite_b2b_model->user_name($)
        $json = array(
            'username' => $username,
            'password' => $password,
        );
        $this->output->set_content_type('application/json')->set_output(json_encode($json));
    }

    // edi PO backup before DKSH go live 15112023
    public function backup_export_edi_get()
    {
        // get b2b_summary.pomain_info data export status is 0
        $check_export_status =  $this->db->query("SELECT 
        b.supplier_group_name,
        -- f.`type`,
        -- f.`Variance`,
        IFNULL(f.`Variance`,'0') AS `Variance`,
        e.`acc_name`,
        IF(d.`export_retailer_name` = '','no maintain', d.`export_retailer_name`) AS customer_name,
        c.`supplier_name`,
        a.`customer_guid`,
        a.`RefNo`,
        a.`po_json_info`,
        a.`export_status`,
        a.`cancel`,
        d.`doc_type`,
        d.`supplier_guid`,
        d.`selected_field`,
        d.`selected_field_child`,
        d.`issend`,
        d.`export_method`,
        d.`export_format`,
        d.`export_header`,
        d.`export_filename_replace`,
        d.`filename_replace_value`,
        d.`export_round_decimal`,
        d.`export_date_format`,
        d.`export_file_name_format`,
        d.`export_add_extra_name`,
        d.`sftp_host`,
        d.`sftp_port`,
        d.`sftp_username`,
        d.`sftp_password`,
        d.`sftp_remote_path`,
        d.`local_file_path`,
        d.`split_batch`,
        d.`set_start_end`,
        d.`po_value_comma`,
        d.`po_comma_settings`,
        d.`sftp_step`,
        d.`export_filename_batch_no`
        FROM b2b_summary.`pomain_info` AS a
        INNER JOIN lite_b2b.`set_supplier_group` AS b
        ON a.`supplier_code` = b.`supplier_group_name`
        AND a.customer_guid = b.customer_guid

        LEFT JOIN lite_b2b.`set_supplier` AS c
        ON b.`supplier_guid` = c.`supplier_guid`
        
        LEFT JOIN lite_b2b.`set_supplier_group_edi` AS d
        ON a.`customer_guid` = d.`customer_guid`
        AND b.`supplier_guid` = d.`supplier_guid`
        AND d.doc_type = 'PO'
        
        LEFT JOIN lite_b2b.`acc` AS e
        ON a.`customer_guid` = e.`acc_guid`
        
        -- LEFT JOIN lite_b2b.`query_outstanding` AS f
        -- ON b.`supplier_guid` = f.`supplier_guid`
        LEFT JOIN lite_b2b.`query_outstanding_retailer` AS f
        ON b.`supplier_guid` = f.`supplier_guid`
        AND b.`customer_guid` = f.`customer_guid`
        -- AND f.`Variance` !='1'

        LEFT JOIN b2b_summary.pomain AS g
        ON a.refno = g.refno
        AND a.customer_guid = g.customer_guid
        
        WHERE a.`postdatetime` BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE() + INTERVAL 1 DAY
        AND a.`export_status` ='0'
        -- AND f.`type` != '1'
        AND c.`subscribe_edi` = '1'
        AND d.`status` = '1'
        AND (f.`Variance` != '1' OR f.Variance IS NULL)
        AND g.refno IS NOT NULL
        -- AND a.refno IN('IFMPO23080170')
        -- LIMIT 1
        ");
        //print_r($check_export_status->row('RefNo')); die;
        $status = '';
        $message = '';


        $selected_field_list = array();
        $final_data = array();
        $csv_header = array();
        $exported_refno_list = array();
        $export_method_list = array();
        $exported_refno_list_final = array();

        // from backend column name contain decimal,double
        $round_filed = ['UnitPrice', 'NetUnitPrice', 'DiscAmt', 'TotalPrice', 'gst_tax_rate', 'gst_tax_amount', 'TotalPrice_include_tax'];
        // from backend column name contain date
        // $date_filed = array_column($this->db->query("SELECT a.column_name
        // FROM lite_b2b.set_edi_column_info AS a
        // WHERE a.column_datatype IN('Date','date')
        // GROUP BY a.column_name")->result_array(), 'column_name');

        $date_filed = ['PODate', 'expiry_date','DeliverDate'];

        if ($check_export_status->num_rows() >= 1) {

            $count = 0;

            foreach ($check_export_status->result() as $row) {

                // check supplier_code and customer_guid contain final_data if no reset count to 0
                if (!array_key_exists($row->supplier_group_name, $final_data) || !array_key_exists($row->customer_guid, $final_data[$row->supplier_group_name])) {
                    $count = 0;
                }

                // set po_json_info
                $po_json[0] = json_decode($row->po_json_info, true);

                // set export format
                $export_method_list[$row->supplier_group_name][$row->customer_guid] = array(
                    'supplier_guid' => $row->supplier_guid,
                    'supplier_name' => substr($row->supplier_name, 0, strpos($row->supplier_name, ' ')),
                    'customer_guid' => $row->customer_guid,
                    'customer_name' => $row->customer_name,
                    'export_method' => $row->export_method,
                    'export_format' => $row->export_format,
                    'export_header' => $row->export_header,
                    'export_filename_replace' => $row->export_filename_replace,
                    'filename_replace_value' => $row->filename_replace_value,
                    'issend' => $row->issend,
                    'export_round_decimal' => $row->export_round_decimal,
                    'export_date_format' => $row->export_date_format,
                    'export_file_name_format' => $row->export_file_name_format,
                    'export_add_extra_name' => $row->export_add_extra_name,
                    'sftp_host' => $row->sftp_host,
                    'sftp_port' => $row->sftp_port,
                    'sftp_username' => $row->sftp_username,
                    'sftp_password' => $row->sftp_password,
                    'sftp_remote_path' => $row->sftp_remote_path,
                    'local_file_path' => $row->local_file_path,
                    'split_batch' => $row->split_batch,
                    'set_start_end' => $row->set_start_end,
                    'po_value_comma' => $row->po_value_comma,
                    'po_comma_settings' => $row->po_comma_settings, // new variable for dksh edi
                    'sftp_step' => $row->sftp_step, // error due to DKSH sftp to their server
                    'export_filename_batch_no' => $row->export_filename_batch_no, // need add due to DKSH
                );
                // assign supplier code key and set selected_field
                if ($row->selected_field_child == '') {
                    $selected_field_list[$row->supplier_group_name]['main'] = json_decode($row->selected_field, true)['selected_field'];
                } else {
                    $selected_field_list[$row->supplier_group_name]['main'] = json_decode($row->selected_field, true)['selected_field'];
                    $selected_field_list[$row->supplier_group_name]['child'] = json_decode($row->selected_field_child, true)['selected_field_child'];
                }
                // print_r($row->selected_field_child);
                // die;
                // $selected_field_list[$row->supplier_group_name] = json_decode($row->selected_field, true)['selected_field'];
                // print_r($selected_field_list);
                // die;
                $edi_run_no = $this->db->query("SELECT IFNULL( MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                FROM lite_b2b.`edi_log` AS a
                INNER JOIN lite_b2b.`set_supplier_group` AS b
                ON a.`supplier_guid` = b.`supplier_guid`
                AND b.`supplier_guid` = '$row->supplier_guid'
                AND b.`customer_guid` = '$row->customer_guid'
                AND a.type ='PO'")->row('runno');

                if ($row->export_filename_replace == '1') {
                    
                    $filename_explode = explode('_',$row->export_file_name_format);

                    $filename_replace_explode = explode(',',$row->filename_replace_value);

                    // print_r($filename_replace_explode); die;

                    $filename_replace_array = [];
                    foreach($filename_replace_explode as $key => $value)
                    {
                        $filename_replace_array[] = $row->$value;    
                    }

                    // print_r($filename_replace_array); die;
                    $filename = str_replace($filename_explode, $filename_replace_array, $row->export_file_name_format);
                    // print_r($file_name_replace); die;

                    if ($row->export_add_extra_name == 'date') {

                        $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $row->export_format;
                    } else if ($row->export_add_extra_name == 'datetime') {
    
                        $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $row->export_format;
                    } else {
    
                        $filename = $filename . '_' .  $edi_run_no . '.' . $row->export_format;
                    }
                }
                else
                {
                    if ($row->export_add_extra_name == 'date') {

                        $filename = $row->export_file_name_format . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $row->export_format;
                    } else if ($row->export_add_extra_name == 'datetime') {
    
                        $filename = $row->export_file_name_format . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $row->export_format;
                    } else {
    
                        $filename = $row->export_file_name_format . '_' .  $edi_run_no . '.' . $row->export_format;
                    }
                }

                foreach ($po_json as $key => $value) {

                    // check po_json supplier code with selected_field exist (edited 070323 strtoupper for scode wipro)
                    if (array_key_exists(strtoupper($value['pomain'][0]['SCode']), $selected_field_list)) {
                        // print_r($selected_field_list[$value['pomain'][$count]['SCode']][$count]);
                        // die;
                        // set refno selected
                        array_push($exported_refno_list, $value['pomain'][0]['RefNo']);
                        //$exported_refno_list[strtoupper($value['pomain'][0]['SCode'])][] = $value['pomain'][0]['RefNo'];
                        // foreach return [pomain,pochild]
                        foreach ($value as $key1 => $value1) {
                            // print_r($value1);
                            // die;
                            $set_date_format = $export_method_list[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid]['export_date_format'];

                            if ($key1 == 'pochild') {
                                // foreach pochild value

                                foreach ($value1 as $key2 => $value2) {
                                    // print_r(json_encode($value2));
                                    // die;
                                    // check all selected field
                                    foreach ($selected_field_list[strtoupper($value['pomain'][0]['SCode'])] as $positon_key => $field1) {
                                        // need to make changes for 3 condition (M001)
                                        if ($positon_key == 'main' && count($selected_field_list[strtoupper($value['pomain'][0]['SCode'])]) >= 2) {

                                            foreach ($field1 as $key => $field) {

                                                // check po_json_info array have selected field value
                                                // compare selected_filed value and pomain key
                                                if (array_key_exists($field['b2b_field'], $value['pomain'][0])) {

                                                    // check condition date format
                                                    if (in_array($field['b2b_field'], $date_filed)) {
                                                        // final_data[supplier_code][customer_guid][index][supplier_field]
                                                        // supplier_field get from selected_field_json
                                                        // $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = str_replace('-', $check_export_status->row('export_date_format'),  $value['pomain'][0][$field['b2b_field']]);

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = date($set_date_format, strtotime($value['pomain'][0][$field['b2b_field']]));
                                                    } else {
                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] =  str_replace(["\r", "\n"], ' ', $value['pomain'][0][$field['b2b_field']]);
                                                    }
                                                }
                                                // compare selected_filed value and hq pochild key
                                                else if (array_key_exists($field['b2b_field'], $value2)) {

                                                    // check round number to decimal

                                                    if (in_array($field['b2b_field'], $round_filed)) {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] =  number_format($value2[$field['b2b_field']], $check_export_status->row('export_round_decimal'), '.', '');
                                                    } else {
                                                        // check cross_ref is true
                                                        if ($field['cross_ref'] == '1') {

                                                            $cross_ref_data = $this->db->query("SELECT c.`" . $field['different_b2b_field'] . "` as data
                                                            FROM b2b_summary.`itemmaster_info` AS a
                                                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                            ON a.`supplier_guid` = b.`supplier_guid`
                                                            AND b.`customer_guid` = '$row->customer_guid'
                                                            AND b.`supplier_guid` = '$row->supplier_guid'
                                                            INNER JOIN b2b_summary.`supplier_itemmaster_info` AS c
                                                            ON a.`supplier_itemmaster_guid` = c.`guid`
                                                            WHERE a.`b2b_barcode` = '" . $value2['Barcode'] . "'
                                                            AND c.validity_start_date <= NOW()
                                                            AND c.validity_end_date >= NOW()")->row('data');

                                                            // return null set empty string
                                                            if ($cross_ref_data == '' || $cross_ref_data == null) {

                                                                // need to check with b2b return what value
                                                                // $cross_ref_data = $value2['Barcode'];
                                                                $cross_ref_data = $value2['Itemcode'];
                                                                // $this->db->query("INSERT INTO lite_b2b.
                                                                // VALUES()");
                                                            }

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = $cross_ref_data;
                                                        } else {
                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = str_replace('/', '',  $value2[$field['b2b_field']]);
                                                        }
                                                    }
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'B2B Running Number') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = $edi_run_no;
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'File Name') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = $filename;
                                                }
                                                // if no match key return default value
                                                else {
                                                    //check this PO is cancel or no if cancel return CANCEL
                                                    if ($value['pomain'][0]['cancel'] == '1' && $field['b2b_field'] == 'status') {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = 'CANCEL';
                                                    } else {
                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] =  $field['default_value'];
                                                    }
                                                }
                                            }
                                        } elseif ($positon_key == 'child' && count($selected_field_list[strtoupper($value['pomain'][0]['SCode'])]) >= 2) {
                                            foreach ($field1 as $key => $field) {

                                                // check po_json_info array have selected field value
                                                // compare selected_filed value and pomain key
                                                if (array_key_exists($field['b2b_field'], $value['pomain'][0])) {

                                                    // check condition date format
                                                    if (in_array($field['b2b_field'], $date_filed)) {
                                                        // final_data[supplier_code][customer_guid][index][supplier_field]
                                                        // supplier_field get from selected_field_json
                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  date($set_date_format, strtotime($value['pomain'][0][$field['b2b_field']]));
                                                    } else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  str_replace(["\r", "\n"], ' ', $value['pomain'][0][$field['b2b_field']]);
                                                    }
                                                }
                                                // compare selected_filed value and pochild key
                                                else if (array_key_exists($field['b2b_field'], $value2)) {

                                                    // check round number to decimal

                                                    if (in_array($field['b2b_field'], $round_filed)) {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  number_format($value2[$field['b2b_field']], $check_export_status->row('export_round_decimal'), '.', '');
                                                    } else {

                                                        // check cross_ref is true
                                                        if ($field['cross_ref'] == '1') {

                                                            $cross_ref_data = $this->db->query("SELECT c.`" . $field['different_b2b_field'] . "` as data
                                                            FROM b2b_summary.`itemmaster_info` AS a
                                                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                            ON a.`supplier_guid` = b.`supplier_guid`
                                                            AND b.`customer_guid` = '$row->customer_guid'
                                                            AND b.`supplier_guid` = '$row->supplier_guid'
                                                            INNER JOIN b2b_summary.`supplier_itemmaster_info` AS c
                                                            ON a.`supplier_itemmaster_guid` = c.`guid`
                                                            WHERE a.`b2b_barcode` = '" . $value2['Barcode'] . "'
                                                            AND c.validity_start_date <= NOW()
                                                            AND c.validity_end_date >= NOW()")->row('data');

                                                            // return null set empty string
                                                            if ($cross_ref_data == '' || $cross_ref_data == null) {

                                                                // $cross_ref_data = $value2['Barcode'];
                                                                $cross_ref_data = $value2['Itemcode'];
                                                            }

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $cross_ref_data;
                                                        } else {

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = str_replace('/', '',  $value2[$field['b2b_field']]);
                                                        }
                                                    }
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'B2B Running Number') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $edi_run_no;
                                                }
                                                // if match Filename
                                                else if ($field['b2b_field'] == 'File Name') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $filename;
                                                }
                                                // if no match key return default value
                                                else {
                                                    //check this PO is cancel or no if cancel return CANCEL
                                                    if ($value['pomain'][0]['cancel'] == '1' && $field['b2b_field'] == 'status') {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = 'CANCEL';
                                                    } else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  $field['default_value'];
                                                    }
                                                }
                                            }
                                        } else {

                                            foreach ($field1 as $key => $field) {
                                                // check po_json_info array have selected field value
                                                // compare selected_filed value and pomain key
                                                if (array_key_exists($field['b2b_field'], $value['pomain'][0])) {

                                                    // check condition date format
                                                    if (in_array($field['b2b_field'], $date_filed)) {
                                                        // final_data[supplier_code][customer_guid][index][supplier_field]
                                                        // supplier_field get from selected_field_json

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = date($set_date_format, strtotime($value['pomain'][0][$field['b2b_field']]));
                                                    } else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  str_replace(["\r", "\n"], ' ', $value['pomain'][0][$field['b2b_field']]);
                                                    }
                                                }
                                                // compare selected_filed value and pochild key
                                                else if (array_key_exists($field['b2b_field'], $value2)) {

                                                    // check round number to decimal

                                                    if (in_array($field['b2b_field'], $round_filed)) {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  number_format($value2[$field['b2b_field']], $check_export_status->row('export_round_decimal'), '.', '');
                                                    } else {

                                                        // check cross_ref is true
                                                        if ($field['cross_ref'] == '1') {

                                                            $cross_ref_data = $this->db->query("SELECT c.`" . $field['different_b2b_field'] . "` as data
                                                            FROM b2b_summary.`itemmaster_info` AS a
                                                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                            ON a.`supplier_guid` = b.`supplier_guid`
                                                            AND b.`customer_guid` = '$row->customer_guid'
                                                            AND b.`supplier_guid` = '$row->supplier_guid'
                                                            INNER JOIN b2b_summary.`supplier_itemmaster_info` AS c
                                                            ON a.`supplier_itemmaster_guid` = c.`guid`
                                                            WHERE a.`b2b_barcode` = '" . $value2['Barcode'] . "'
                                                            AND c.validity_start_date <= NOW()
                                                            AND c.validity_end_date >= NOW()")->row('data');

                                                            // return null set empty string
                                                            if ($cross_ref_data == '' || $cross_ref_data == null) {

                                                                // $cross_ref_data = $value2['Barcode'];
                                                                $cross_ref_data = $value2['Itemcode'];
                                                                // $this->db->query("INSERT INTO lite_b2b.
                                                                // VALUES()");
                                                            }

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $cross_ref_data;
                                                        } else {

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = str_replace('/', '',  $value2[$field['b2b_field']]);
                                                        }
                                                    }
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'B2B Running Number') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $edi_run_no;
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'File Name') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $filename;
                                                }
                                                // if no match key return default value
                                                else {
                                                    //check this PO is cancel or no if cancel return CANCEL
                                                    if ($value['pomain'][0]['cancel'] == '1' && $field['b2b_field'] == 'status') {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = 'CANCEL';
                                                    }
                                                    // else if ($field['b2b_field'] == '') {
                                                    //     // $edi_run_no = $this->db->query("SELECT IFNULL( MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                                                    //     // FROM lite_b2b.`edi_log` AS a
                                                    //     // INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                    //     // ON a.`supplier_guid` = b.`supplier_guid`
                                                    //     // AND b.`supplier_group_name` = 'strtoupper($value['pomain'][0]['SCode'])'
                                                    //     // AND b.`customer_guid` = '$row->customer_guid'")->row('runno');
                                                    // } else if ($field['b2b_field'] == '') {
                                                    //     // $filename = $row->export_file_name_format . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $row->export_format;
                                                    // } 
                                                    else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  $field['default_value'];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    $count++;
                                }
                            }
                        }
                    } else {
                        echo 'po_json_info supplier code no match with selected field supplier code';
                        die;
                    }
                }
            }

            // print_r(json_encode($final_data));
            // print_r(json_encode($csv_header));
            // die;

            foreach ($final_data as $supplier_code_key => $value) {

                // supplier subscribe edi multiple retailer
                foreach ($value as $customer_guid_key => $value2) {

                    // get edi_batch_no from lite_b2b.edi_log
                    // $edi_run_no = $this->db->query("SELECT IFNULL( MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                    // FROM lite_b2b.`edi_log` AS a")->row('runno');
                    if($export_method_list[$supplier_code_key][$customer_guid_key]['split_batch'] == '1')
                    {
                        //split batch
                        foreach($value2 as $customer_guid_key_2 => $value3)
                        {
                            $edi_run_no = $this->db->query("SELECT IFNULL(MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                            FROM lite_b2b.`edi_log` AS a
                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                            ON a.`supplier_guid` = b.`supplier_guid`
                            AND b.`supplier_group_name` = '$supplier_code_key'
                            AND b.`customer_guid` = '$customer_guid_key'
                            AND a.type ='PO'")->row('runno');
          
                            $guid = $this->db->query("SELECT REPLACE(UPPER(UUID()),'-','') as guid ")->row('guid');
                            $now =  $this->db->query("SELECT NOW() as now")->row('now');
                            $ftp = array('status' => '', 'message' => '');
                            if (array_key_exists($supplier_code_key, $export_method_list)) {
                                // get customer_guid and set for define export_method_list_key
                                // $customer_guid_key = $key2;
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_header'] == '1') {
                                    // edit 16112022
                                    $refno_key = array_keys($value2)[0];
                                    $refno_key_split = array_keys($value3)[0];
                                    $header = array_keys($value2[$refno_key]['main'][0]);
                                    // combine value and column name
                                    array_unshift($value3[$refno_key_split], $header);
                                    //print_r($header); die;
                                }
          
                                //get from database lite_b2b.set_supplier_group_edi
                                // $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'];
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_filename_replace'] == '1') 
                                {
                                    $filename_explode = explode('_',$export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
                
                                    $filename_replace_explode = explode(',',$export_method_list[$supplier_code_key][$customer_guid_key]['filename_replace_value']);
                
                                    // print_r($filename_replace_explode); die;
                
                                    $filename_replace_array = [];
                                    foreach($filename_replace_explode as $key => $value)
                                    {
                                        $filename_replace_array[] = $row->$value;    
                                    }
                
                                    // print_r($filename_replace_array); die;
                                    $filename = str_replace($filename_explode, $filename_replace_array, $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
                                    // print_r($filename); die;
    
                                    if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
        
                                        $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
            
                                        $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else {
            
                                        $filename = $filename . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    }
                                }
                                else
                                {
                                    if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
          
                                        $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
              
                                        $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else {
              
                                        $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    }
                                }
          
                                // check export format and generate
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'csv') {
          
                                    // b2b server path
                                    $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                    // b2b  testing server path
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                    // convert string to array
                                    $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
          
                                    $local_file_path_string = '';
                                    // foreach check all the path is valid
                                    foreach ($local_file_path_array as $row) {
                                        // join array to string
                                        $local_file_path_string .= $row . '/';
                                        // check if folder not exists create folder
                                        if (!file_exists($local_file_path_string)) {
          
                                            mkdir($local_file_path_string, 0777, true);
                                            chmod($local_file_path_string, 0777);
                                        }
                                    }
                                    // join path and filename
                                    $local_file_path_string = $local_file_path_string . $filename;
          
                                    $local_file = fopen($local_file_path_string, "x");
                                    //foreach ($value2 as $refno) {
                                        // edit 16112022
                                        foreach ($value3 as $main) {
          
                                            foreach ($main as $line) {
          
                                                foreach ($line as &$column) {
                                                    // print_r($column);
                                                    // die;
                                                    // check refno number exist just add value to array
                                                    if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                        $exported_refno_list_final[] = $column;
                                                    }
                                                    
                                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                    {
                                                        $column = '"' . str_replace(',','',$column) . '"';
                                                    }
                                                    else
                                                    {
                                                        $column = str_replace(',','',$column);
                                                    }
                                                }
          
                                                unset($column);
                                                // fputcsv($file, $line, ',', ' ');
                                                fputs($local_file, implode(',', $line) . "\n");
                                                // fputcsv($file, $line);      
                                            }
                                        }
                                    //}
          
                                    $local_server_storage = fclose($local_file);
          
                                    $this->upload($export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'], $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'], $local_file_path_string);
                                } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'txt') {
          
                                    // b2b server path
                                    $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                    // b2b  testing server path
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                    // convert string to array
                                    $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
          
                                    $local_file_path_string = '';
                                    // foreach check all the path is valid
                                    foreach ($local_file_path_array as $row) {
                                        // join array to string
                                        $local_file_path_string .= $row . '/';
                                        // check if folder not exists create folder
                                        if (!file_exists($local_file_path_string)) {
          
                                            mkdir($local_file_path_string, 0777, true);
                                            chmod($local_file_path_string, 0777);
                                        }
                                    }
                                    // join path and filename
                                    $local_file_path_string = $local_file_path_string . $filename;
          
                                    $local_file = fopen($local_file_path_string, "x");
                                    //foreach ($value2 as $refno) {
                                        // edit 16112022
                                        foreach ($value3 as $main) {
          
                                            foreach ($main as $line) {
          
                                                foreach ($line as &$column) {
                                                    // print_r($column);
                                                    // die;
                                                    // check refno number exist just add value to array
                                                    if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                        $exported_refno_list_final[] = $column;
                                                    }
          
                                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                    {
                                                        $column = '"' . str_replace(',','',$column) . '"';
                                                    }
                                                    else
                                                    {
                                                        $column = str_replace(',','',$column);
                                                    }
                                                }
          
                                                unset($column);
                                                // fputcsv($file, $line, ',', ' ');
                                                fputs($local_file, implode(',', $line) . "\n");
                                                // fputcsv($file, $line);      
                                            }
                                        }
                                    //}
          
                                    $local_server_storage = fclose($local_file);
                                }
          
                                // check export method
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'SFTP' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
          
                                    // remote file path from client
                                    $remote_path = $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_remote_path'] . $filename;
          
                                    // call ftp function
                                    $ftp = $this->ftp($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_host'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_port'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_username'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_password'], $local_file_path_string, $remote_path,'0');
                                } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'Azure' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
                                    // ext cloud storage path
          
                                    $ext_file_path = $export_method_list[$supplier_code_key][$customer_guid_key]['local_file_path'];
          
                                    // convert string to array
                                    $ext_file_path_array = explode('/', substr($ext_file_path, 0, -1));
          
                                    $ext_file_path_string = '';
                                    // foreach check all the path is valid
                                    foreach ($ext_file_path_array as $row) {
                                        // join array to string
                                        $ext_file_path_string .= $row . '/';
                                        // check if folder not exists create folder
                                        if (!file_exists($ext_file_path_string)) {
          
                                            mkdir($ext_file_path_string, 0777, true);
                                            chmod($ext_file_path_string, 0777);
                                        }
                                    }
                                    // join path and filename
                                    $ext_file_path_string = $ext_file_path_string . $filename;
          
          
                                    // ext clound storage
                                    $ext_file = fopen($ext_file_path_string, "x");
                                    // $file = fopen($file_path, "x");
                                    // print_r(json_encode($value));
                                    // die;
                                    
                                    //foreach ($value2 as $refno) {
                                        // edit 16112022
                                        foreach ($value3 as $main) {
          
                                            foreach ($main as $line) {
          
                                                foreach ($line as &$column) {
                                                    // print_r($column);
                                                    // die;
                                                    // check refno number exist just add value to array
                                                    if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                        $exported_refno_list_final[] = $column;
                                                    }
          
                                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                    {
                                                        $column = '"' . str_replace(',','',$column) . '"';
                                                    }
                                                    else
                                                    {
                                                        $column = str_replace(',','',$column);
                                                    }
                                                }
          
                                                unset($column);
                                                // fputcsv($file, $line, ',', ' ');
          
          
                                                fputs($ext_file, implode(',', $line) . "\n");
                                                // fputcsv($file, $line);      
                                            }
                                        }
                                    //}
          
                                    $ext_server_storage = fclose($ext_file);
                                }
          
                                // prepare log for insert record at lite_b2b.edi_log
                                if ($local_server_storage == '1') {
                                    if ($ftp['status'] == 'SUCCESS') {
          
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => $ftp['status'],
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                        );
          
                                        $status = 'true';
                                        $message = 'Success ftp to client';
                                    } else if ($ftp['status'] == 'FAIL') {
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => $ftp['status'],
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                            'error_message_reason' => $ftp['message'],
                                        );
                                        // $this->db->insert('lite_b2b.edi_log', $log);
          
                                        $status = 'false';
                                        $message = 'Fail ftp to client';
                                    } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '0') {
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => 'NEW',
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                            'error_message_reason' =>  '',
                                        );
          
                                        $status = 'true';
                                        $message = 'Success Generate CSV';
                                    } else {
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? 'SUCCESS' : 'UNSUCCESSFUL',
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                            'error_message_reason' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? '' : 'Unsuccessful Generate',
                                        );
          
                                        $status = 'true';
                                        $message = 'Success Generate CSV';
                                    }
                                } else {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => 'UNSUCCESSFUL',
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' => 'Unsuccessful Generate',
                                    );
          
                                    $status = 'true';
                                    $message = 'Success Generate CSV';
                                }
          
          
                                // insert record at lite_b2b.edi_log
                                $this->db->insert('lite_b2b.edi_log', $log);
                                // update b2b_summary.pomain_info export status to 1 and current datetime and auto accept PO
                                if ($status == 'true') {
                                    $exported_refno_in = implode("','", $exported_refno_list_final);
          
                                    $exported_refno_in = "'" . $exported_refno_in . "'";
          
                                    // update b2b_summary.pomain_info export_time,export_status,edi_batch_no
                                    $this->db->query("UPDATE b2b_summary.pomain_info
                                    SET export_time = '$now',export_status = '1',edi_batch_no = '$edi_run_no',status = 'Accepted',b2b_status = 'readysend'
                                    WHERE RefNo IN ($exported_refno_in) ");
          
                                    // get document status only status new,viewed,printed
                                    $doc_status = $this->db->query("SELECT a.`RefNo`,a.`status`
                                     FROM b2b_summary.`pomain` AS a
                                     WHERE a.`customer_guid` = '$customer_guid_key'
                                     AND a.`RefNo`IN($exported_refno_in)
                                     AND a.`status` IN('','viewed','printed')")->result_array();
          
                                    if (count($doc_status) > 0) {
          
                                        $refno_list_final = array();
          
                                        foreach ($doc_status as $key => $value) {
                                            array_push($refno_list_final, $value['RefNo']);
                                        }
          
                                        // auto accept po
                                        $this->lite_b2b_update_model->accept_po('b2b_summary', $customer_guid_key, $refno_list_final);
          
                                        // keep log
                                        $this->lite_b2b_insert_model->supplier_movement($customer_guid_key, '2BE81949614711ECBD8F000D3AA2838A', 'Edi_Accepted_po', 'PO', $refno_list_final);
                                    }
                                }
                                // reset value to empty for another supplier
                                $exported_refno_list_final = [];
                            }
                        }
                    }
                    else
                    {
                        //no split batch
                        $edi_run_no = $this->db->query("SELECT IFNULL(MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                        FROM lite_b2b.`edi_log` AS a
                        INNER JOIN lite_b2b.`set_supplier_group` AS b
                        ON a.`supplier_guid` = b.`supplier_guid`
                        AND b.`supplier_group_name` = '$supplier_code_key'
                        AND b.`customer_guid` = '$customer_guid_key'
                        AND a.type ='PO'")->row('runno');
    
                        $guid = $this->db->query("SELECT REPLACE(UPPER(UUID()),'-','') as guid ")->row('guid');
                        $now =  $this->db->query("SELECT NOW() as now")->row('now');
                        $ftp = array('status' => '', 'message' => '');
                        if (array_key_exists($supplier_code_key, $export_method_list)) {
                            // get customer_guid and set for define export_method_list_key
                            // $customer_guid_key = $key2;
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_header'] == '1') {
                                $refno_key = array_keys($value2)[0];
                                $header = array_keys($value2[$refno_key]['main'][0]);
                                // combine value and column name
                                array_unshift($value2[$refno_key]['main'], $header);

                                // combine start and end at value - edit by jr 20-04-2023
                                if($export_method_list[$supplier_code_key][$customer_guid_key]['set_start_end'] == '1')
                                {
                                    $start_key = ['START'];
                                    $end_key = ['END'];
                                    
                                    array_unshift($value2[$refno_key]['main'], $start_key);
                                    array_push($value2[$refno_key]['main'], $end_key);
                                }
                            }
                            else
                            {
                                $refno_key = array_keys($value2)[0];

                                if($export_method_list[$supplier_code_key][$customer_guid_key]['set_start_end'] == '1')
                                {
                                    $start_key = ['START'];
                                    $end_key = ['END'];
                                    
                                    array_unshift($value2[$refno_key]['main'], $start_key);
                                    array_push($value2[$refno_key]['main'], $end_key);
                                }
                            }

                            //get from database lite_b2b.set_supplier_group_edi
                            // $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'];
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_filename_replace'] == '1') 
                            {
                                $filename_explode = explode('_',$export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
            
                                $filename_replace_explode = explode(',',$export_method_list[$supplier_code_key][$customer_guid_key]['filename_replace_value']);
            
                                // print_r($filename_replace_explode); die;
            
                                $filename_replace_array = [];
                                foreach($filename_replace_explode as $key => $value)
                                {
                                    $filename_replace_array[] = $row->$value;    
                                }
            
                                // print_r($filename_replace_array); die;
                                $filename = str_replace($filename_explode, $filename_replace_array, $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
                                // print_r($file_name_replace); die;

                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
    
                                    $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
        
                                    $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                } else {
        
                                    $filename = $filename . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                }
                            }
                            else
                            {
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
    
                                    $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
        
                                    $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                } else {
        
                                    $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                }
                            }
    
                            // check export format and generate
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'csv') {
    
                                // b2b server path
                                $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                // b2b  testing server path
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                // convert string to array
                                $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
    
                                $local_file_path_string = '';
                                // foreach check all the path is valid
                                foreach ($local_file_path_array as $row) {
                                    // join array to string
                                    $local_file_path_string .= $row . '/';
                                    // check if folder not exists create folder
                                    if (!file_exists($local_file_path_string)) {
    
                                        mkdir($local_file_path_string, 0777, true);
                                        chmod($local_file_path_string, 0777);
                                    }
                                }
                                // join path and filename
                                $local_file_path_string = $local_file_path_string . $filename;
    
                                $local_file = fopen($local_file_path_string, "x");
                                foreach ($value2 as $refno) {
    
                                    foreach ($refno as $main) {
    
                                        foreach ($main as $line) {
    
                                            foreach ($line as &$column) {
                                                // print_r($column);
                                                // die;
                                                // check refno number exist just add value to array
                                                if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                    $exported_refno_list_final[] = $column;
                                                }
    
                                                if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                {
                                                    $column = '"' . str_replace(',','',$column) . '"';
                                                }
                                                else
                                                {
                                                    $column = str_replace(',','',$column);
                                                }
                                            }
    
                                            unset($column);
                                            // fputcsv($file, $line, ',', ' ');
                                            fputs($local_file, implode(',', $line) . "\n");
                                            // fputcsv($file, $line);      
                                        }
                                    }
                                }
    
                                $local_server_storage = fclose($local_file);
    
                                // $this->upload($export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'], $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'], $local_file_path_string);
                            } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'txt') {
    
                                // b2b server path
                                $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                // b2b  testing server path
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                // convert string to array
                                $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
    
                                $local_file_path_string = '';
                                // foreach check all the path is valid
                                foreach ($local_file_path_array as $row) {
                                    // join array to string
                                    $local_file_path_string .= $row . '/';
                                    // check if folder not exists create folder
                                    if (!file_exists($local_file_path_string)) {
    
                                        mkdir($local_file_path_string, 0777, true);
                                        chmod($local_file_path_string, 0777);
                                    }
                                }
                                // join path and filename
                                $local_file_path_string = $local_file_path_string . $filename;
    
                                $local_file = fopen($local_file_path_string, "x");
                                foreach ($value2 as $refno) {
    
                                    foreach ($refno as $main) {
    
                                        foreach ($main as $line) {
    
                                            foreach ($line as &$column) {
                                                // print_r($column);
                                                // die;
                                                // check refno number exist just add value to array
                                                if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                    $exported_refno_list_final[] = $column;
                                                }
    
                                                if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                {
                                                    $column = '"' . str_replace(',','',$column) . '"';
                                                }
                                                else
                                                {
                                                    $column = str_replace(',','',$column);
                                                }
                                            }
    
                                            unset($column);
                                            // fputcsv($file, $line, ',', ' ');
                                            fputs($local_file, implode(',', $line) . "\n");
                                            // fputcsv($file, $line);      
                                        }
                                    }
                                }
    
                                $local_server_storage = fclose($local_file);
                            }
    
                            // check export method
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'SFTP' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
    
                                // remote file path from client
                                $remote_path = $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_remote_path'] . $filename;
    
                                // call ftp function
                                $ftp = $this->ftp($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_host'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_port'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_username'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_password'], $local_file_path_string, $remote_path,'0');
                            } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'Azure' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
                                // ext cloud storage path
    
                                $ext_file_path = $export_method_list[$supplier_code_key][$customer_guid_key]['local_file_path'];
    
                                // convert string to array
                                $ext_file_path_array = explode('/', substr($ext_file_path, 0, -1));
    
                                $ext_file_path_string = '';
                                // foreach check all the path is valid
                                foreach ($ext_file_path_array as $row) {
                                    // join array to string
                                    $ext_file_path_string .= $row . '/';
                                    // check if folder not exists create folder
                                    if (!file_exists($ext_file_path_string)) {
    
                                        mkdir($ext_file_path_string, 0777, true);
                                        chmod($ext_file_path_string, 0777);
                                    }
                                }
                                // join path and filename
                                $ext_file_path_string = $ext_file_path_string . $filename;
    
    
                                // ext clound storage
                                $ext_file = fopen($ext_file_path_string, "x");
                                // $file = fopen($file_path, "x");
                                // print_r(json_encode($value));
                                // die;
    
                                foreach ($value2 as $refno) {
    
                                    foreach ($refno as $main) {
    
                                        foreach ($main as $line) {
    
                                            foreach ($line as &$column) {
                                                // print_r($column);
                                                // die;
                                                // check refno number exist just add value to array
                                                if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                    $exported_refno_list_final[] = $column;
                                                }
    
                                                if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                {
                                                    $column = '"' . str_replace(',','',$column) . '"';
                                                }
                                                else
                                                {
                                                    $column = str_replace(',','',$column);
                                                }
                                            }
    
                                            unset($column);
                                            // fputcsv($file, $line, ',', ' ');
    
    
                                            fputs($ext_file, implode(',', $line) . "\n");
                                            // fputcsv($file, $line);      
                                        }
                                    }
                                }
    
                                $ext_server_storage = fclose($ext_file);
                            }
    
                            // prepare log for insert record at lite_b2b.edi_log
                            if ($local_server_storage == '1') {
                                if ($ftp['status'] == 'SUCCESS') {
    
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => $ftp['status'],
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                    );
    
                                    $status = 'true';
                                    $message = 'Success ftp to client';
                                } else if ($ftp['status'] == 'FAIL') {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => $ftp['status'],
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' => $ftp['message'],
                                    );
                                    // $this->db->insert('lite_b2b.edi_log', $log);
    
                                    $status = 'false';
                                    $message = 'Fail ftp to client';
                                } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '0') {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => 'NEW',
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' =>  '',
                                    );
    
                                    $status = 'true';
                                    $message = 'Success Generate CSV';
                                } else {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? 'SUCCESS' : 'UNSUCCESSFUL',
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? '' : 'Unsuccessful Generate',
                                    );
    
                                    $status = 'true';
                                    $message = 'Success Generate CSV';
                                }
                            } else {
                                $log = array(
                                    'guid' => $guid,
                                    'status' => 'UNSUCCESSFUL',
                                    'type' => 'PO',
                                    'edi_batch_no' => $edi_run_no,
                                    'file_name' => $filename,
                                    'refno' => json_encode($exported_refno_list_final),
                                    'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                    'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                    'created_at' => $now,
                                    'created_by' => 'system',
                                    'updated_at' => $now,
                                    'updated_by' => 'system',
                                    'error_message_reason' => 'Unsuccessful Generate',
                                );
    
                                $status = 'true';
                                $message = 'Success Generate CSV';
                            }
    
    
                            // insert record at lite_b2b.edi_log
                            $this->db->insert('lite_b2b.edi_log', $log);
                            // update b2b_summary.pomain_info export status to 1 and current datetime and auto accept PO
                            if ($status == 'true') {
                                $exported_refno_in = implode("','", $exported_refno_list_final);
    
                                $exported_refno_in = "'" . $exported_refno_in . "'";
    
                                // update b2b_summary.pomain_info export_time,export_status,edi_batch_no
                                $this->db->query("UPDATE b2b_summary.pomain_info
                                SET export_time = '$now',export_status = '1',edi_batch_no = '$edi_run_no',status = 'Accepted',b2b_status = 'readysend'
                                WHERE RefNo IN ($exported_refno_in) 
                                AND customer_guid = '$customer_guid_key'");
    
                                // get document status only status new,viewed,printed
                                $doc_status = $this->db->query("SELECT a.`RefNo`,a.`status`
                                 FROM b2b_summary.`pomain` AS a
                                 WHERE a.`customer_guid` = '$customer_guid_key'
                                 AND a.`RefNo`IN($exported_refno_in)
                                 AND a.`status` IN('','viewed','printed')")->result_array();
    
                                if (count($doc_status) > 0) {
    
                                    $refno_list_final = array();
    
                                    foreach ($doc_status as $key => $value) {
                                        array_push($refno_list_final, $value['RefNo']);
                                    }
    
                                    // auto accept po
                                    $this->lite_b2b_update_model->accept_po('b2b_summary', $customer_guid_key, $refno_list_final);
    
                                    // keep log
                                    $this->lite_b2b_insert_model->supplier_movement($customer_guid_key, '2BE81949614711ECBD8F000D3AA2838A', 'Edi_Accepted_po', 'PO', $refno_list_final);
                                }
                            }
                            // reset value to empty for another supplier
                            $exported_refno_list_final = [];
                        }
                    }
                }
            }
        } else {
            $status = 'true';
            $message = 'no new record found';
        }


        $json = array(
            'status' => $status,
            'message' => $message,
        );

        $this->response($json);
    } // end edi po

    public function export_edi_get()
    {
        // get b2b_summary.pomain_info data export status is 0
        $check_export_status =  $this->db->query("SELECT 
        c.`RefNo`,
        b.`postdatetime`,
        c.`supplier_code`,
        aa.*,
        c.`po_json_info`,
        c.`export_status`,
        c.`cancel`
        FROM
        (
        SELECT c.supplier_group_name,
        IFNULL(d.`Variance`,'0') AS `Variance`,
        e.`acc_name`,
        IF(a.`export_retailer_name` = '','no maintain', a.`export_retailer_name`) AS customer_name,
        b.`supplier_name`,
        a.`doc_type`,
        a.`customer_guid`,
        a.`supplier_guid`,
        a.`selected_field`,
        a.`selected_field_child`,
        a.`issend`,
        a.`export_method`,
        a.`export_format`,
        a.`export_header`,
        a.`export_filename_replace`,
        a.`filename_replace_value`,
        a.`export_round_decimal`,
        a.`export_date_format`,
        a.`export_file_name_format`,
        a.`export_add_extra_name`,
        a.`sftp_host`,
        a.`sftp_port`,
        a.`sftp_username`,
        a.`sftp_password`,
        a.`sftp_remote_path`,
        a.`local_file_path`,
        a.`split_batch`,
        a.`set_start_end`,
        a.`po_value_comma`,
        a.`po_comma_settings`,
        a.`sftp_step`,
        a.`export_filename_batch_no`,
        a.`go_live_date`,
        a.`po_cancel`
        FROM lite_b2b.set_supplier_group_edi a
        INNER JOIN lite_b2b.set_supplier b
        ON a.supplier_guid = b.supplier_guid
        AND b.subscribe_edi = '1'
        INNER JOIN lite_b2b.set_supplier_group c
        ON b.supplier_guid = c.supplier_guid
        AND a.customer_guid = c.customer_guid
        LEFT JOIN lite_b2b.`query_outstanding_retailer` AS d
        ON a.`customer_guid` = d.`customer_guid`
        AND a.`supplier_guid` = d.`supplier_guid`
        INNER JOIN lite_b2b.acc e
        ON a.customer_guid = e.acc_guid
        WHERE a.`status` = '1'
        AND a.doc_type = 'PO'
        AND (d.`Variance` != '1' OR d.Variance IS NULL)
        GROUP BY c.supplier_group_name,a.customer_guid,a.supplier_guid
        )aa
        INNER JOIN b2b_summary.pomain b
        ON aa.supplier_group_name = b.scode
        AND aa.customer_guid = b.customer_guid
        AND (b.cancel = '0' OR b.cancel = aa.po_cancel)
        INNER JOIN b2b_summary.pomain_info c
        ON b.refno = c.refno
        AND b.customer_guid = c.customer_guid
        AND aa.supplier_group_name = c.supplier_code
        AND c.export_status = '0'
        WHERE b.`postdatetime` BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE() + INTERVAL 1 DAY
        AND DATE(b.postdatetime) >= aa.go_live_date
        -- LIMIT 1
        ");
        // print_r($check_export_status->row('RefNo')); die;
        $status = '';
        $message = '';


        $selected_field_list = array();
        $final_data = array();
        $csv_header = array();
        $exported_refno_list = array();
        $export_method_list = array();
        $exported_refno_list_final = array();
        $exported_loc_group_list = array();
        $exported_loc_group_list_final = array();
        $store_filename_replace_array = array();

        // from backend column name contain decimal,double
        $round_filed = ['UnitPrice', 'NetUnitPrice', 'DiscAmt', 'TotalPrice', 'gst_tax_rate', 'gst_tax_amount', 'TotalPrice_include_tax'];
        // from backend column name contain date
        // $date_filed = array_column($this->db->query("SELECT a.column_name
        // FROM lite_b2b.set_edi_column_info AS a
        // WHERE a.column_datatype IN('Date','date')
        // GROUP BY a.column_name")->result_array(), 'column_name');

        $date_filed = ['PODate', 'expiry_date','DeliverDate'];

        if ($check_export_status->num_rows() >= 1) {

            $count = 0;

            foreach ($check_export_status->result() as $row) {

                // check supplier_code and customer_guid contain final_data if no reset count to 0
                if (!array_key_exists($row->supplier_group_name, $final_data) || !array_key_exists($row->customer_guid, $final_data[$row->supplier_group_name])) {
                    $count = 0;
                }

                // set po_json_info
                $po_json[0] = json_decode($row->po_json_info, true);

                // set export format
                $export_method_list[$row->supplier_group_name][$row->customer_guid] = array(
                    'supplier_guid' => $row->supplier_guid,
                    'supplier_name' => substr($row->supplier_name, 0, strpos($row->supplier_name, ' ')),
                    'customer_guid' => $row->customer_guid,
                    'customer_name' => $row->customer_name,
                    'export_method' => $row->export_method,
                    'export_format' => $row->export_format,
                    'export_header' => $row->export_header,
                    'export_filename_replace' => $row->export_filename_replace,
                    'filename_replace_value' => $row->filename_replace_value,
                    'issend' => $row->issend,
                    'export_round_decimal' => $row->export_round_decimal,
                    'export_date_format' => $row->export_date_format,
                    'export_file_name_format' => $row->export_file_name_format,
                    'export_add_extra_name' => $row->export_add_extra_name,
                    'sftp_host' => $row->sftp_host,
                    'sftp_port' => $row->sftp_port,
                    'sftp_username' => $row->sftp_username,
                    'sftp_password' => $row->sftp_password,
                    'sftp_remote_path' => $row->sftp_remote_path,
                    'local_file_path' => $row->local_file_path,
                    'split_batch' => $row->split_batch,
                    'set_start_end' => $row->set_start_end,
                    'po_value_comma' => $row->po_value_comma,
                    'po_comma_settings' => $row->po_comma_settings, // new variable for dksh edi
                    'sftp_step' => $row->sftp_step, // error due to DKSH sftp to their server
                    'export_filename_batch_no' => $row->export_filename_batch_no, // need add due to DKSH
                );
                // assign supplier code key and set selected_field
                if ($row->selected_field_child == '') {
                    $selected_field_list[$row->supplier_group_name]['main'] = json_decode($row->selected_field, true)['selected_field'];
                } else {
                    $selected_field_list[$row->supplier_group_name]['main'] = json_decode($row->selected_field, true)['selected_field'];
                    $selected_field_list[$row->supplier_group_name]['child'] = json_decode($row->selected_field_child, true)['selected_field_child'];
                }
                // print_r($row->selected_field_child);
                // die;
                // $selected_field_list[$row->supplier_group_name] = json_decode($row->selected_field, true)['selected_field'];
                // print_r($selected_field_list);
                // die;
                $edi_run_no = $this->db->query("SELECT IFNULL( MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                FROM lite_b2b.`edi_log` AS a
                INNER JOIN lite_b2b.`set_supplier_group` AS b
                ON a.`supplier_guid` = b.`supplier_guid`
                AND b.`supplier_guid` = '$row->supplier_guid'
                AND b.`customer_guid` = '$row->customer_guid'
                AND a.type ='PO'")->row('runno');

                if ($row->export_filename_replace == '1') {
                    
                    $filename_explode = explode('_',$row->export_file_name_format);

                    $filename_replace_explode = explode(',',$row->filename_replace_value);

                    // print_r($filename_replace_explode); die;

                    $filename_replace_array = [];
                    foreach($filename_replace_explode as $key => $value)
                    {
                        $filename_replace_array[] = $row->$value;    
                        $store_filename_replace_array[$row->RefNo][] = $row->$value;
                    }

                    // print_r($filename_replace_array); die;
                    $filename = str_replace($filename_explode, $filename_replace_array, $row->export_file_name_format);
                    // print_r($file_name_replace); die;

                    if($row->export_filename_batch_no == '1')
                    {
                        if ($row->export_add_extra_name == 'date') {

                            $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $row->export_format;
                        } else if ($row->export_add_extra_name == 'datetime') {
        
                            $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $row->export_format;
                        } else {
        
                            $filename = $filename . '_' .  $edi_run_no . '.' . $row->export_format;
                        }
                    }
                    else
                    {
                        if ($row->export_add_extra_name == 'date') {

                            $filename = $filename . '_' . date("Ymd") . '.' . $row->export_format;
                        } else if ($row->export_add_extra_name == 'datetime') {
        
                            $filename = $filename . '_' .  date("YmdHis") . '.' . $row->export_format;
                        } else {
        
                            $filename = $filename . '.' . $row->export_format;
                        }
                    }
                }
                else
                {
                    if ($row->export_add_extra_name == 'date') {

                        $filename = $row->export_file_name_format . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $row->export_format;
                    } else if ($row->export_add_extra_name == 'datetime') {
    
                        $filename = $row->export_file_name_format . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $row->export_format;
                    } else {
    
                        $filename = $row->export_file_name_format . '_' .  $edi_run_no . '.' . $row->export_format;
                    }
                }

                foreach ($po_json as $key => $value) {

                    // check po_json supplier code with selected_field exist (edited 070323 strtoupper for scode wipro)
                    if (array_key_exists(strtoupper($value['pomain'][0]['SCode']), $selected_field_list)) {
                        // print_r($selected_field_list[$value['pomain'][$count]['SCode']][$count]);
                        // die;
                        // set refno selected
                        array_push($exported_refno_list, $value['pomain'][0]['RefNo']);
                        //$exported_refno_list[strtoupper($value['pomain'][0]['SCode'])][] = $value['pomain'][0]['RefNo'];
                        // foreach return [pomain,pochild]
                        foreach ($value as $key1 => $value1) {
                            // print_r($value1);
                            // die;
                            $set_date_format = $export_method_list[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid]['export_date_format'];

                            if ($key1 == 'pochild') {
                                // foreach pochild value

                                foreach ($value1 as $key2 => $value2) {
                                    // print_r(json_encode($value2));
                                    // die;
                                    // check all selected field
                                    foreach ($selected_field_list[strtoupper($value['pomain'][0]['SCode'])] as $positon_key => $field1) {
                                        // need to make changes for 3 condition (M001)
                                        if ($positon_key == 'main' && count($selected_field_list[strtoupper($value['pomain'][0]['SCode'])]) >= 2) {

                                            foreach ($field1 as $key => $field) {

                                                // check po_json_info array have selected field value
                                                // compare selected_filed value and pomain key
                                                if (array_key_exists($field['b2b_field'], $value['pomain'][0])) {

                                                    // check condition date format
                                                    if (in_array($field['b2b_field'], $date_filed)) {
                                                        // final_data[supplier_code][customer_guid][index][supplier_field]
                                                        // supplier_field get from selected_field_json
                                                        // $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = str_replace('-', $check_export_status->row('export_date_format'),  $value['pomain'][0][$field['b2b_field']]);

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = date($set_date_format, strtotime($value['pomain'][0][$field['b2b_field']]));
                                                    } else {
                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] =  str_replace(["\r", "\n"], ' ', $value['pomain'][0][$field['b2b_field']]);
                                                    }
                                                }
                                                // compare selected_filed value and hq pochild key
                                                else if (array_key_exists($field['b2b_field'], $value2)) {

                                                    // check round number to decimal

                                                    if (in_array($field['b2b_field'], $round_filed)) {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] =  number_format($value2[$field['b2b_field']], $check_export_status->row('export_round_decimal'), '.', '');
                                                    } else {
                                                        // check cross_ref is true
                                                        if ($field['cross_ref'] == '1') {

                                                            $cross_ref_data = $this->db->query("SELECT c.`" . $field['different_b2b_field'] . "` as data
                                                            FROM b2b_summary.`itemmaster_info` AS a
                                                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                            ON a.`supplier_guid` = b.`supplier_guid`
                                                            AND b.`customer_guid` = '$row->customer_guid'
                                                            AND b.`supplier_guid` = '$row->supplier_guid'
                                                            INNER JOIN b2b_summary.`supplier_itemmaster_info` AS c
                                                            ON a.`supplier_itemmaster_guid` = c.`guid`
                                                            WHERE a.`b2b_barcode` = '" . $value2['Barcode'] . "'
                                                            AND c.validity_start_date <= NOW()
                                                            AND c.validity_end_date >= NOW()")->row('data');

                                                            // return null set empty string
                                                            if ($cross_ref_data == '' || $cross_ref_data == null) {

                                                                // need to check with b2b return what value
                                                                // $cross_ref_data = $value2['Barcode'];
                                                                $cross_ref_data = $value2['Itemcode'];
                                                                // $this->db->query("INSERT INTO lite_b2b.
                                                                // VALUES()");
                                                            }

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = $cross_ref_data;
                                                        } else {
                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = str_replace('/', '',  $value2[$field['b2b_field']]);
                                                        }
                                                    }
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'B2B Running Number') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = $edi_run_no;
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'File Name') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = $filename;
                                                }
                                                // if no match key return default value
                                                else {
                                                    //check this PO is cancel or no if cancel return CANCEL
                                                    if ($value['pomain'][0]['cancel'] == '1' && $field['b2b_field'] == 'status') {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] = 'CANCEL';
                                                    } else {
                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][0][$field['supplier_field']] =  $field['default_value'];
                                                    }
                                                }
                                            }
                                        } elseif ($positon_key == 'child' && count($selected_field_list[strtoupper($value['pomain'][0]['SCode'])]) >= 2) {
                                            foreach ($field1 as $key => $field) {

                                                // check po_json_info array have selected field value
                                                // compare selected_filed value and pomain key
                                                if (array_key_exists($field['b2b_field'], $value['pomain'][0])) {

                                                    // check condition date format
                                                    if (in_array($field['b2b_field'], $date_filed)) {
                                                        // final_data[supplier_code][customer_guid][index][supplier_field]
                                                        // supplier_field get from selected_field_json
                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  date($set_date_format, strtotime($value['pomain'][0][$field['b2b_field']]));
                                                    } else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  str_replace(["\r", "\n"], ' ', $value['pomain'][0][$field['b2b_field']]);
                                                    }
                                                }
                                                // compare selected_filed value and pochild key
                                                else if (array_key_exists($field['b2b_field'], $value2)) {

                                                    // check round number to decimal

                                                    if (in_array($field['b2b_field'], $round_filed)) {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  number_format($value2[$field['b2b_field']], $check_export_status->row('export_round_decimal'), '.', '');
                                                    } else {

                                                        // check cross_ref is true
                                                        if ($field['cross_ref'] == '1') {

                                                            $cross_ref_data = $this->db->query("SELECT c.`" . $field['different_b2b_field'] . "` as data
                                                            FROM b2b_summary.`itemmaster_info` AS a
                                                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                            ON a.`supplier_guid` = b.`supplier_guid`
                                                            AND b.`customer_guid` = '$row->customer_guid'
                                                            AND b.`supplier_guid` = '$row->supplier_guid'
                                                            INNER JOIN b2b_summary.`supplier_itemmaster_info` AS c
                                                            ON a.`supplier_itemmaster_guid` = c.`guid`
                                                            WHERE a.`b2b_barcode` = '" . $value2['Barcode'] . "'
                                                            AND c.validity_start_date <= NOW()
                                                            AND c.validity_end_date >= NOW()")->row('data');

                                                            // return null set empty string
                                                            if ($cross_ref_data == '' || $cross_ref_data == null) {

                                                                // $cross_ref_data = $value2['Barcode'];
                                                                $cross_ref_data = $value2['Itemcode'];
                                                            }

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $cross_ref_data;
                                                        } else {

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = str_replace('/', '',  $value2[$field['b2b_field']]);
                                                        }
                                                    }
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'B2B Running Number') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $edi_run_no;
                                                }
                                                // if match Filename
                                                else if ($field['b2b_field'] == 'File Name') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $filename;
                                                }
                                                // if no match key return default value
                                                else {
                                                    //check this PO is cancel or no if cancel return CANCEL
                                                    if ($value['pomain'][0]['cancel'] == '1' && $field['b2b_field'] == 'status') {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = 'CANCEL';
                                                    } else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  $field['default_value'];
                                                    }
                                                }
                                            }
                                        } else {

                                            foreach ($field1 as $key => $field) {
                                                // check po_json_info array have selected field value
                                                // compare selected_filed value and pomain key
                                                if (array_key_exists($field['b2b_field'], $value['pomain'][0])) {

                                                    // check condition date format
                                                    if (in_array($field['b2b_field'], $date_filed)) {
                                                        // final_data[supplier_code][customer_guid][index][supplier_field]
                                                        // supplier_field get from selected_field_json

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = date($set_date_format, strtotime($value['pomain'][0][$field['b2b_field']]));
                                                    } else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  str_replace(["\r", "\n"], ' ', $value['pomain'][0][$field['b2b_field']]);
                                                    }
                                                }
                                                // compare selected_filed value and pochild key
                                                else if (array_key_exists($field['b2b_field'], $value2)) {

                                                    // check round number to decimal

                                                    if (in_array($field['b2b_field'], $round_filed)) {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  number_format($value2[$field['b2b_field']], $check_export_status->row('export_round_decimal'), '.', '');
                                                    } else {

                                                        // check cross_ref is true
                                                        if ($field['cross_ref'] == '1') {

                                                            $cross_ref_data = $this->db->query("SELECT c.`" . $field['different_b2b_field'] . "` as data
                                                            FROM b2b_summary.`itemmaster_info` AS a
                                                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                            ON a.`supplier_guid` = b.`supplier_guid`
                                                            AND b.`customer_guid` = '$row->customer_guid'
                                                            AND b.`supplier_guid` = '$row->supplier_guid'
                                                            INNER JOIN b2b_summary.`supplier_itemmaster_info` AS c
                                                            ON a.`supplier_itemmaster_guid` = c.`guid`
                                                            WHERE a.`b2b_barcode` = '" . $value2['Barcode'] . "'
                                                            AND c.validity_start_date <= NOW()
                                                            AND c.validity_end_date >= NOW()")->row('data');

                                                            // return null set empty string
                                                            if ($cross_ref_data == '' || $cross_ref_data == null) {

                                                                // $cross_ref_data = $value2['Barcode'];
                                                                $cross_ref_data = $value2['Itemcode'];
                                                                // $this->db->query("INSERT INTO lite_b2b.
                                                                // VALUES()");
                                                            }

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $cross_ref_data;
                                                        } else {

                                                            $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = str_replace('/', '',  $value2[$field['b2b_field']]);
                                                        }
                                                    }
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'B2B Running Number') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $edi_run_no;
                                                }
                                                // if match B2B Running Number return current supplier EDI running number
                                                else if ($field['b2b_field'] == 'File Name') {

                                                    $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = $filename;
                                                }
                                                // if no match key return default value
                                                else {
                                                    //check this PO is cancel or no if cancel return CANCEL
                                                    if ($value['pomain'][0]['cancel'] == '1' && $field['b2b_field'] == 'status') {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] = 'CANCEL';
                                                    }
                                                    // else if ($field['b2b_field'] == '') {
                                                    //     // $edi_run_no = $this->db->query("SELECT IFNULL( MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                                                    //     // FROM lite_b2b.`edi_log` AS a
                                                    //     // INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                    //     // ON a.`supplier_guid` = b.`supplier_guid`
                                                    //     // AND b.`supplier_group_name` = 'strtoupper($value['pomain'][0]['SCode'])'
                                                    //     // AND b.`customer_guid` = '$row->customer_guid'")->row('runno');
                                                    // } else if ($field['b2b_field'] == '') {
                                                    //     // $filename = $row->export_file_name_format . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $row->export_format;
                                                    // } 
                                                    else {

                                                        $final_data[strtoupper($value['pomain'][0]['SCode'])][$row->customer_guid][$value['pomain'][0]['RefNo']][$positon_key][$count][$field['supplier_field']] =  $field['default_value'];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    $count++;
                                }
                            }
                        }
                    } else {
                        echo 'po_json_info supplier code no match with selected field supplier code';
                        die;
                    }
                }
            }

            // print_r($store_filename_replace_array); die;
            // print_r($store_filename_replace_array[$refno_key]); die;
            // print_r(json_encode($final_data));
            // print_r(json_encode($csv_header));
            // die;

            foreach ($final_data as $supplier_code_key => $value) {

                // supplier subscribe edi multiple retailer
                foreach ($value as $customer_guid_key => $value2) {

                    // get edi_batch_no from lite_b2b.edi_log
                    // $edi_run_no = $this->db->query("SELECT IFNULL( MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                    // FROM lite_b2b.`edi_log` AS a")->row('runno');
                    if($export_method_list[$supplier_code_key][$customer_guid_key]['split_batch'] == '1')
                    {
                        //split batch
                        foreach($value2 as $customer_guid_key_2 => $value3)
                        {
                            $edi_run_no = $this->db->query("SELECT IFNULL(MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                            FROM lite_b2b.`edi_log` AS a
                            INNER JOIN lite_b2b.`set_supplier_group` AS b
                            ON a.`supplier_guid` = b.`supplier_guid`
                            AND b.`supplier_group_name` = '$supplier_code_key'
                            AND b.`customer_guid` = '$customer_guid_key'
                            AND a.type ='PO'")->row('runno');
          
                            $guid = $this->db->query("SELECT REPLACE(UPPER(UUID()),'-','') as guid ")->row('guid');
                            $now =  $this->db->query("SELECT NOW() as now")->row('now');
                            $ftp = array('status' => '', 'message' => '');
                            if (array_key_exists($supplier_code_key, $export_method_list)) {
                                // get customer_guid and set for define export_method_list_key
                                // $customer_guid_key = $key2;
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_header'] == '1') {
                                    // edit 16112022
                                    $refno_key = array_keys($value2)[0];
                                    $refno_key_split = array_keys($value3)[0];
                                    $header = array_keys($value2[$refno_key]['main'][0]);
                                    // combine value and column name
                                    array_unshift($value3[$refno_key_split], $header);
                                    //print_r($header); die;

                                    // combine start and end at value - edit by jr 20-04-2023
                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['set_start_end'] == '1')
                                    {
                                        $start_key = ['START'];
                                        $end_key = ['END'];
    
                                        array_unshift($value3[$refno_key_split], $start_key);
                                        array_push($value3[$refno_key_split], $end_key);
                                    }
                                }
                                else
                                {
                                    $refno_key = array_keys($value2)[0];
                                    $refno_key_split = array_keys($value3)[0];

                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['set_start_end'] == '1')
                                    {
                                        $start_key = ['START'];
                                        $end_key = ['END'];
    
                                        array_unshift($value3[$refno_key_split], $start_key);
                                        array_push($value3[$refno_key_split], $end_key);
                                    }
                                }
          
                                //get from database lite_b2b.set_supplier_group_edi
                                // $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'];
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_filename_replace'] == '1') 
                                {
                                    $filename_explode = explode('_',$export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);

                                    $filename_replace_array_file = $store_filename_replace_array[$customer_guid_key_2];

                                    $filename = str_replace($filename_explode, $filename_replace_array_file, $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);

                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['export_filename_batch_no'] == '1')
                                    {
                                        if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
        
                                            $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                        } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
                
                                            $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                        } else {
                
                                            $filename = $filename . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                        }
                                    }
                                    else
                                    {
                                        if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
        
                                            $filename = $filename . '_' . date("Ymd") . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                        } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
                
                                            $filename = $filename . '_' .  date("YmdHis") . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                        } else {
                
                                            $filename = $filename . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                        }

                                        // new add 091123
                                        $current_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";

                                        $new_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/reuploads/";
     
                                        $check_current_file_path = $current_file_path . $filename;
                                        $check_new_file_path = $new_file_path . $filename;

                                        $new_file_path_array = explode('/', substr($new_file_path, 0, -1));
          
                                        $new_file_path_string = '';
                                        // foreach check all the path is valid
                                        foreach ($new_file_path_array as $row) {
                                            // join array to string
                                            $new_file_path_string .= $row . '/';
                                            // check if folder not exists create folder
                                            if (!file_exists($new_file_path_string)) {
            
                                                mkdir($new_file_path_string, 0777, true);
                                                chmod($new_file_path_string, 0777);
                                            }
                                        }
    
                                        if(file_exists($check_new_file_path))
                                        {
                                            unlink($check_new_file_path);
                                        }
    
                                        if(file_exists($check_current_file_path))
                                        {
                                            $this->move_file($current_file_path, $new_file_path, $filename);
                                        }
                                    }
                                    
                                    // $filename_explode = explode('_',$export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
                
                                    // $filename_replace_explode = explode(',',$export_method_list[$supplier_code_key][$customer_guid_key]['filename_replace_value']);
                
                                    // // print_r($filename_replace_explode); die;
                
                                    // $filename_replace_array = [];
                                    // foreach($filename_replace_explode as $key => $value)
                                    // {
                                    //     $filename_replace_array[] = $row->$value;    
                                    // }
                
                                    // // print_r($filename_replace_array); die;
                                    // $filename = str_replace($filename_explode, $filename_replace_array, $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
                                    // // print_r($filename); die;
    
                                    // if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
        
                                    //     $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    // } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
            
                                    //     $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    // } else {
            
                                    //     $filename = $filename . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    // }
                                }
                                else
                                {
                                    if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
          
                                        $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
              
                                        $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else {
              
                                        $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    }
                                }
          
                                // check export format and generate
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'csv') {
          
                                    // b2b server path
                                    $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                    // b2b  testing server path
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                    // convert string to array
                                    $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
          
                                    $local_file_path_string = '';
                                    // foreach check all the path is valid
                                    foreach ($local_file_path_array as $row) {
                                        // join array to string
                                        $local_file_path_string .= $row . '/';
                                        // check if folder not exists create folder
                                        if (!file_exists($local_file_path_string)) {
          
                                            mkdir($local_file_path_string, 0777, true);
                                            chmod($local_file_path_string, 0777);
                                        }
                                    }
                                    // join path and filename
                                    $local_file_path_string = $local_file_path_string . $filename;
          
                                    $local_file = fopen($local_file_path_string, "x");
                                    //foreach ($value2 as $refno) {
                                        // edit 16112022
                                        foreach ($value3 as $main) {
          
                                            foreach ($main as $line) {
          
                                                foreach ($line as &$column) {
                                                    // print_r($column);
                                                    // die;
                                                    // check refno number exist just add value to array
                                                    if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                        $exported_refno_list_final[] = $column;
                                                    }
                                                    
                                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                    {
                                                        $column = '"' . str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column) . '"';
                                                    }
                                                    else
                                                    {
                                                        $column = str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column);
                                                    }
                                                }
          
                                                unset($column);
                                                // fputcsv($file, $line, ',', ' ');
                                                fputs($local_file, implode($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'], $line) . "\n");
                                                // fputcsv($file, $line);      
                                            }
                                        }
                                    //}
          
                                    $local_server_storage = fclose($local_file);
          
                                    $this->upload($export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'], $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'], $local_file_path_string);
                                } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'txt') {
          
                                    // b2b server path
                                    $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                    // b2b  testing server path
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                    // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                    // convert string to array
                                    $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
          
                                    $local_file_path_string = '';
                                    // foreach check all the path is valid
                                    foreach ($local_file_path_array as $row) {
                                        // join array to string
                                        $local_file_path_string .= $row . '/';
                                        // check if folder not exists create folder
                                        if (!file_exists($local_file_path_string)) {
          
                                            mkdir($local_file_path_string, 0777, true);
                                            chmod($local_file_path_string, 0777);
                                        }
                                    }
                                    // join path and filename
                                    $local_file_path_string = $local_file_path_string . $filename;
          
                                    $local_file = fopen($local_file_path_string, "x");
                                    //foreach ($value2 as $refno) {
                                        // edit 16112022
                                        foreach ($value3 as $main) {
          
                                            foreach ($main as $line) {
          
                                                foreach ($line as &$column) {
                                                    // print_r($column);
                                                    // die;
                                                    // check refno number exist just add value to array
                                                    if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                        $exported_refno_list_final[] = $column;
                                                    }
          
                                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                    {
                                                        $column = '"' . str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column) . '"';
                                                    }
                                                    else
                                                    {
                                                        $column = str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column);
                                                    }
                                                }
          
                                                unset($column);
                                                // fputcsv($file, $line, ',', ' ');
                                                fputs($local_file, implode($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'], $line) . "\n");
                                                // fputcsv($file, $line);      
                                            }
                                        }
                                    //}
          
                                    $local_server_storage = fclose($local_file);
                                }
          
                                // check export method
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'SFTP' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
          
                                    // remote file path from client
                                    $remote_path = $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_remote_path'] . $filename;
                                    // print_r('success_ftp3'); die;
                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_step'] == '1')
                                    {
                                        // call ftp function
                                        $ftp = $this->ftp($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_host'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_port'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_username'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_password'], $local_file_path_string, $remote_path,$export_method_list[$supplier_code_key][$customer_guid_key]['sftp_step']);
                                    }
                                    else
                                    {
                                        // call ftp function
                                        $ftp = $this->ftp($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_host'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_port'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_username'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_password'], $local_file_path_string, $remote_path,'0');
                                    }
                                    
                                } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'Azure' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
                                    // ext cloud storage path
          
                                    $ext_file_path = $export_method_list[$supplier_code_key][$customer_guid_key]['local_file_path'];
          
                                    // convert string to array
                                    $ext_file_path_array = explode('/', substr($ext_file_path, 0, -1));
          
                                    $ext_file_path_string = '';
                                    // foreach check all the path is valid
                                    foreach ($ext_file_path_array as $row) {
                                        // join array to string
                                        $ext_file_path_string .= $row . '/';
                                        // check if folder not exists create folder
                                        if (!file_exists($ext_file_path_string)) {
          
                                            mkdir($ext_file_path_string, 0777, true);
                                            chmod($ext_file_path_string, 0777);
                                        }
                                    }
                                    // join path and filename
                                    $ext_file_path_string = $ext_file_path_string . $filename;
          
          
                                    // ext clound storage
                                    $ext_file = fopen($ext_file_path_string, "x");
                                    // $file = fopen($file_path, "x");
                                    // print_r(json_encode($value));
                                    // die;
                                    
                                    //foreach ($value2 as $refno) {
                                        // edit 16112022
                                        foreach ($value3 as $main) {
          
                                            foreach ($main as $line) {
          
                                                foreach ($line as &$column) {
                                                    // print_r($column);
                                                    // die;
                                                    // check refno number exist just add value to array
                                                    if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                        $exported_refno_list_final[] = $column;
                                                    }
          
                                                    if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                    {
                                                        $column = '"' . str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column) . '"';
                                                    }
                                                    else
                                                    {
                                                        $column = str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column);
                                                    }
                                                }
          
                                                unset($column);
                                                // fputcsv($file, $line, ',', ' ');
          
                                                fputs($ext_file, implode($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'], $line) . "\n");
                                                // fputcsv($file, $line);      
                                            }
                                        }
                                    //}
          
                                    $ext_server_storage = fclose($ext_file);
                                }
          
                                // prepare log for insert record at lite_b2b.edi_log
                                if ($local_server_storage == '1') {
                                    if ($ftp['status'] == 'SUCCESS') {
          
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => $ftp['status'],
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                        );
          
                                        $status = 'true';
                                        $message = 'Success ftp to client';
                                    } else if ($ftp['status'] == 'FAIL') {
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => $ftp['status'],
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                            'error_message_reason' => $ftp['message'],
                                        );
                                        // $this->db->insert('lite_b2b.edi_log', $log);
          
                                        $status = 'false';
                                        $message = 'Fail ftp to client';
                                    } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '0') {
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => 'NEW',
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                            'error_message_reason' =>  '',
                                        );
          
                                        $status = 'true';
                                        $message = 'Success Generate CSV';
                                    } else {
                                        $log = array(
                                            'guid' => $guid,
                                            'status' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? 'SUCCESS' : 'UNSUCCESSFUL',
                                            'type' => 'PO',
                                            'edi_batch_no' => $edi_run_no,
                                            'file_name' => $filename,
                                            'refno' => json_encode($exported_refno_list_final),
                                            'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                            'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                            'created_at' => $now,
                                            'created_by' => 'system',
                                            'updated_at' => $now,
                                            'updated_by' => 'system',
                                            'error_message_reason' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? '' : 'Unsuccessful Generate',
                                        );
          
                                        $status = 'true';
                                        $message = 'Success Generate CSV';
                                    }
                                } else {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => 'UNSUCCESSFUL',
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' => 'Unsuccessful Generate',
                                    );
          
                                    $status = 'true';
                                    $message = 'Success Generate CSV';
                                }
          
          
                                // insert record at lite_b2b.edi_log
                                $this->db->insert('lite_b2b.edi_log', $log);
                                // update b2b_summary.pomain_info export status to 1 and current datetime and auto accept PO
                                if ($status == 'true') {
                                    $exported_refno_in = implode("','", $exported_refno_list_final);
          
                                    $exported_refno_in = "'" . $exported_refno_in . "'";
          
                                    // update b2b_summary.pomain_info export_time,export_status,edi_batch_no
                                    $this->db->query("UPDATE b2b_summary.pomain_info
                                    SET export_time = '$now',export_status = '1',edi_batch_no = '$edi_run_no',status = 'Accepted',b2b_status = 'readysend'
                                    WHERE RefNo IN ($exported_refno_in) ");
          
                                    // get document status only status new,viewed,printed
                                    $doc_status = $this->db->query("SELECT a.`RefNo`,a.`status`
                                     FROM b2b_summary.`pomain` AS a
                                     WHERE a.`customer_guid` = '$customer_guid_key'
                                     AND a.`RefNo`IN($exported_refno_in)
                                     AND a.`status` IN('','viewed','printed')")->result_array();
          
                                    if (count($doc_status) > 0) {
          
                                        $refno_list_final = array();
          
                                        foreach ($doc_status as $key => $value) {
                                            array_push($refno_list_final, $value['RefNo']);
                                        }
          
                                        // auto accept po
                                        $this->lite_b2b_update_model->accept_po('b2b_summary', $customer_guid_key, $refno_list_final);
          
                                        // keep log
                                        $this->lite_b2b_insert_model->supplier_movement($customer_guid_key, '2BE81949614711ECBD8F000D3AA2838A', 'Edi_Accepted_po', 'PO', $refno_list_final);
                                    }
                                }
                                // reset value to empty for another supplier
                                $exported_refno_list_final = [];
                            }
                        }
                    }
                    else
                    {
                        //no split batch
                        $edi_run_no = $this->db->query("SELECT IFNULL(MAX( LPAD(RIGHT(a.`edi_batch_no`, 4) + 1, 7, 0) ), LPAD(1, 7, 0) ) AS runno 
                        FROM lite_b2b.`edi_log` AS a
                        INNER JOIN lite_b2b.`set_supplier_group` AS b
                        ON a.`supplier_guid` = b.`supplier_guid`
                        AND b.`supplier_group_name` = '$supplier_code_key'
                        AND b.`customer_guid` = '$customer_guid_key'
                        AND a.type ='PO'")->row('runno');
    
                        $guid = $this->db->query("SELECT REPLACE(UPPER(UUID()),'-','') as guid ")->row('guid');
                        $now =  $this->db->query("SELECT NOW() as now")->row('now');
                        $ftp = array('status' => '', 'message' => '');
                        if (array_key_exists($supplier_code_key, $export_method_list)) {
                            // get customer_guid and set for define export_method_list_key
                            // $customer_guid_key = $key2;
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_header'] == '1') {
                                $refno_key = array_keys($value2)[0];
                                $header = array_keys($value2[$refno_key]['main'][0]);
                                // combine value and column name
                                array_unshift($value2[$refno_key]['main'], $header);

                                // combine start and end at value - edit by jr 20-04-2023
                                if($export_method_list[$supplier_code_key][$customer_guid_key]['set_start_end'] == '1')
                                {
                                    $start_key = ['START'];
                                    $end_key = ['END'];
                                    
                                    array_unshift($value2[$refno_key]['main'], $start_key);
                                    array_push($value2[$refno_key]['main'], $end_key);
                                }
                            }
                            else
                            {
                                $refno_key = array_keys($value2)[0];

                                if($export_method_list[$supplier_code_key][$customer_guid_key]['set_start_end'] == '1')
                                {
                                    $start_key = ['START'];
                                    $end_key = ['END'];
                                    
                                    array_unshift($value2[$refno_key]['main'], $start_key);
                                    array_push($value2[$refno_key]['main'], $end_key);
                                }
                            }

                            //get from database lite_b2b.set_supplier_group_edi
                            // $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'];
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_filename_replace'] == '1') 
                            {
                                $filename_explode = explode('_',$export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
            
                                $filename_replace_explode = explode(',',$export_method_list[$supplier_code_key][$customer_guid_key]['filename_replace_value']);

                                $filename_replace_array_file = $store_filename_replace_array[$refno_key];

                                $filename = str_replace($filename_explode, $filename_replace_array_file, $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
                                // print_r($file_name_replace); die;

                                if($export_method_list[$supplier_code_key][$customer_guid_key]['export_filename_batch_no'] == '1')
                                {
                                    if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
    
                                        $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
            
                                        $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else {
            
                                        $filename = $filename . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    }
                                }
                                else
                                {
                                    if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
    
                                        $filename = $filename . '_' . date("Ymd") . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
            
                                        $filename = $filename . '_' .  date("YmdHis") . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    } else {
            
                                        $filename = $filename . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                    }

                                    // new add 091123
                                    $current_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";

                                    $new_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/reuploads/";
 
                                    $check_current_file_path = $current_file_path . $filename;
                                    $check_new_file_path = $new_file_path . $filename;

                                    $new_file_path_array = explode('/', substr($new_file_path, 0, -1));
      
                                    $new_file_path_string = '';
                                    // foreach check all the path is valid
                                    foreach ($new_file_path_array as $row) {
                                        // join array to string
                                        $new_file_path_string .= $row . '/';
                                        // check if folder not exists create folder
                                        if (!file_exists($new_file_path_string)) {
        
                                            mkdir($new_file_path_string, 0777, true);
                                            chmod($new_file_path_string, 0777);
                                        }
                                    }

                                    if(file_exists($check_new_file_path))
                                    {
                                        unlink($check_new_file_path);
                                    }

                                    if(file_exists($check_current_file_path))
                                    {
                                        $this->move_file($current_file_path, $new_file_path, $filename);
                                    }
                                }
                                // $filename_explode = explode('_',$export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
            
                                // $filename_replace_explode = explode(',',$export_method_list[$supplier_code_key][$customer_guid_key]['filename_replace_value']);
            
                                // // print_r($filename_replace_explode); die;
            
                                // $filename_replace_array = [];
                                // foreach($filename_replace_explode as $key => $value)
                                // {
                                //     $filename_replace_array[] = $row->$value;    
                                // }
            
                                // // print_r($filename_replace_array); die;
                                // $filename = str_replace($filename_explode, $filename_replace_array, $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format']);
                                // // print_r($file_name_replace); die;

                                // if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
    
                                //     $filename = $filename . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                // } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
        
                                //     $filename = $filename . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                // } else {
        
                                //     $filename = $filename . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                // }
                            }
                            else
                            {
                                if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'date') {
    
                                    $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' . date("Ymd") . '_' . $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_add_extra_name'] == 'datetime') {
        
                                    $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  date("YmdHis") . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                } else {
        
                                    $filename = $export_method_list[$supplier_code_key][$customer_guid_key]['export_file_name_format'] . '_' .  $edi_run_no . '.' . $export_method_list[$supplier_code_key][$customer_guid_key]['export_format'];
                                }
                            }
    
                            // check export format and generate
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'csv') {
    
                                // b2b server path
                                $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                // b2b  testing server path
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                // convert string to array
                                $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
    
                                $local_file_path_string = '';
                                // foreach check all the path is valid
                                foreach ($local_file_path_array as $row) {
                                    // join array to string
                                    $local_file_path_string .= $row . '/';
                                    // check if folder not exists create folder
                                    if (!file_exists($local_file_path_string)) {
    
                                        mkdir($local_file_path_string, 0777, true);
                                        chmod($local_file_path_string, 0777);
                                    }
                                }
                                // join path and filename
                                $local_file_path_string = $local_file_path_string . $filename;
    
                                $local_file = fopen($local_file_path_string, "x");
                                foreach ($value2 as $refno) {
    
                                    foreach ($refno as $main) {
    
                                        foreach ($main as $line) {
    
                                            foreach ($line as &$column) {
                                                // print_r($column);
                                                // die;
                                                // check refno number exist just add value to array
                                                if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                    $exported_refno_list_final[] = $column;
                                                }
    
                                                if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                {
                                                    $column = '"' . str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column) . '"';
                                                }
                                                else
                                                {
                                                    $column = str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column);
                                                }
                                            }
    
                                            unset($column);
                                            // fputcsv($file, $line, ',', ' ');
                                            fputs($local_file, implode($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'], $line) . "\n");
                                            // fputcsv($file, $line);      
                                        }
                                    }
                                }
    
                                $local_server_storage = fclose($local_file);
    
                                // $this->upload($export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'], $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'], $local_file_path_string);
                            } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['export_format'] == 'txt') {
    
                                // b2b server path
                                $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'] . "/" . $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'] . "/";
                                // b2b  testing server path
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/application/controllers/lite_b2b/";
                                // $local_file_path = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/";
                                // convert string to array
                                $local_file_path_array = explode('/', substr($local_file_path, 0, -1));
    
                                $local_file_path_string = '';
                                // foreach check all the path is valid
                                foreach ($local_file_path_array as $row) {
                                    // join array to string
                                    $local_file_path_string .= $row . '/';
                                    // check if folder not exists create folder
                                    if (!file_exists($local_file_path_string)) {
    
                                        mkdir($local_file_path_string, 0777, true);
                                        chmod($local_file_path_string, 0777);
                                    }
                                }
                                // join path and filename
                                $local_file_path_string = $local_file_path_string . $filename;
    
                                $local_file = fopen($local_file_path_string, "x");
                                foreach ($value2 as $refno) {
    
                                    foreach ($refno as $main) {
    
                                        foreach ($main as $line) {
    
                                            foreach ($line as &$column) {
                                                // print_r($column);
                                                // die;
                                                // check refno number exist just add value to array
                                                if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                    $exported_refno_list_final[] = $column;
                                                }
    
                                                if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                {
                                                    $column = '"' . str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column) . '"';
                                                }
                                                else
                                                {
                                                    $column = str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column);
                                                }
                                            }
    
                                            unset($column);
                                            // fputcsv($file, $line, ',', ' ');
                                            fputs($local_file, implode($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'], $line) . "\n");
                                            // fputcsv($file, $line);      
                                        }
                                    }
                                }
    
                                $local_server_storage = fclose($local_file);
                            }
    
                            // check export method
                            if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'SFTP' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
    
                                // remote file path from client
                                $remote_path = $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_remote_path'] . $filename;
                                //print_r('success_ftp4'); die;
                                if($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_step'] == '1')
                                {
                                    // call ftp function
                                    $ftp = $this->ftp($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_host'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_port'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_username'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_password'], $local_file_path_string, $remote_path,$export_method_list[$supplier_code_key][$customer_guid_key]['sftp_step']);
                                }
                                else
                                {
                                    // call ftp function
                                    $ftp = $this->ftp($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_host'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_port'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_username'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_password'], $local_file_path_string, $remote_path,'0');
                                }
                                // call ftp function
                                //$ftp = $this->ftp($export_method_list[$supplier_code_key][$customer_guid_key]['sftp_host'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_port'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_username'], $export_method_list[$supplier_code_key][$customer_guid_key]['sftp_password'], $local_file_path_string, $remote_path,$export_method_list[$supplier_code_key][$customer_guid_key]['sftp_step']);
                            } else if ($export_method_list[$supplier_code_key][$customer_guid_key]['export_method'] == 'Azure' && $export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '1') {
                                // ext cloud storage path
    
                                $ext_file_path = $export_method_list[$supplier_code_key][$customer_guid_key]['local_file_path'];
    
                                // convert string to array
                                $ext_file_path_array = explode('/', substr($ext_file_path, 0, -1));
    
                                $ext_file_path_string = '';
                                // foreach check all the path is valid
                                foreach ($ext_file_path_array as $row) {
                                    // join array to string
                                    $ext_file_path_string .= $row . '/';
                                    // check if folder not exists create folder
                                    if (!file_exists($ext_file_path_string)) {
    
                                        mkdir($ext_file_path_string, 0777, true);
                                        chmod($ext_file_path_string, 0777);
                                    }
                                }
                                // join path and filename
                                $ext_file_path_string = $ext_file_path_string . $filename;
    
    
                                // ext clound storage
                                $ext_file = fopen($ext_file_path_string, "x");
                                // $file = fopen($file_path, "x");
                                // print_r(json_encode($value));
                                // die;
    
                                foreach ($value2 as $refno) {
    
                                    foreach ($refno as $main) {
    
                                        foreach ($main as $line) {
    
                                            foreach ($line as &$column) {
                                                // print_r($column);
                                                // die;
                                                // check refno number exist just add value to array
                                                if (in_array($column, $exported_refno_list) && !in_array($column, $exported_refno_list_final)) {
                                                    $exported_refno_list_final[] = $column;
                                                }
    
                                                if($export_method_list[$supplier_code_key][$customer_guid_key]['po_value_comma'] == '1')
                                                {
                                                    $column = '"' . str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column) . '"';
                                                }
                                                else
                                                {
                                                    $column = str_replace($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'],'',$column);
                                                }
                                            }
    
                                            unset($column);
                                            // fputcsv($file, $line, ',', ' ');
    
                                            fputs($ext_file, implode($export_method_list[$supplier_code_key][$customer_guid_key]['po_comma_settings'], $line) . "\n");
                                            // fputcsv($file, $line);      
                                        }
                                    }
                                }
    
                                $ext_server_storage = fclose($ext_file);
                            }
    
                            // prepare log for insert record at lite_b2b.edi_log
                            if ($local_server_storage == '1') {
                                if ($ftp['status'] == 'SUCCESS') {
    
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => $ftp['status'],
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                    );
    
                                    $status = 'true';
                                    $message = 'Success ftp to client';
                                } else if ($ftp['status'] == 'FAIL') {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => $ftp['status'],
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' => $ftp['message'],
                                    );
                                    // $this->db->insert('lite_b2b.edi_log', $log);
    
                                    $status = 'false';
                                    $message = 'Fail ftp to client';
                                } elseif ($export_method_list[$supplier_code_key][$customer_guid_key]['issend'] == '0') {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => 'NEW',
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' =>  '',
                                    );
    
                                    $status = 'true';
                                    $message = 'Success Generate CSV';
                                } else {
                                    $log = array(
                                        'guid' => $guid,
                                        'status' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? 'SUCCESS' : 'UNSUCCESSFUL',
                                        'type' => 'PO',
                                        'edi_batch_no' => $edi_run_no,
                                        'file_name' => $filename,
                                        'refno' => json_encode($exported_refno_list_final),
                                        'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                        'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                        'created_at' => $now,
                                        'created_by' => 'system',
                                        'updated_at' => $now,
                                        'updated_by' => 'system',
                                        'error_message_reason' => ($local_server_storage == '1' || $local_server_storage == '1' && $ext_server_storage == '1') ? '' : 'Unsuccessful Generate',
                                    );
    
                                    $status = 'true';
                                    $message = 'Success Generate CSV';
                                }
                            } else {
                                $log = array(
                                    'guid' => $guid,
                                    'status' => 'UNSUCCESSFUL',
                                    'type' => 'PO',
                                    'edi_batch_no' => $edi_run_no,
                                    'file_name' => $filename,
                                    'refno' => json_encode($exported_refno_list_final),
                                    'customer_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['customer_guid'],
                                    'supplier_guid' => $export_method_list[$supplier_code_key][$customer_guid_key]['supplier_guid'],
                                    'created_at' => $now,
                                    'created_by' => 'system',
                                    'updated_at' => $now,
                                    'updated_by' => 'system',
                                    'error_message_reason' => 'Unsuccessful Generate',
                                );
    
                                $status = 'true';
                                $message = 'Success Generate CSV';
                            }
    
    
                            // insert record at lite_b2b.edi_log
                            $this->db->insert('lite_b2b.edi_log', $log);

                            // update b2b_summary.pomain_info export status to 1 and current datetime and auto accept PO
                            if ($status == 'true') {
                                $exported_refno_in = implode("','", $exported_refno_list_final);
    
                                $exported_refno_in = "'" . $exported_refno_in . "'";
    
                                // update b2b_summary.pomain_info export_time,export_status,edi_batch_no
                                $this->db->query("UPDATE b2b_summary.pomain_info
                                SET export_time = '$now',export_status = '1',edi_batch_no = '$edi_run_no',status = 'Accepted',b2b_status = 'readysend'
                                WHERE RefNo IN ($exported_refno_in) 
                                AND customer_guid = '$customer_guid_key'");
    
                                // get document status only status new,viewed,printed
                                $doc_status = $this->db->query("SELECT a.`RefNo`,a.`status`
                                 FROM b2b_summary.`pomain` AS a
                                 WHERE a.`customer_guid` = '$customer_guid_key'
                                 AND a.`RefNo`IN($exported_refno_in)
                                 AND a.`status` IN('','viewed','printed')")->result_array();
    
                                if (count($doc_status) > 0) {
    
                                    $refno_list_final = array();
    
                                    foreach ($doc_status as $key => $value) {
                                        array_push($refno_list_final, $value['RefNo']);
                                    }
    
                                    // auto accept po
                                    $this->lite_b2b_update_model->accept_po('b2b_summary', $customer_guid_key, $refno_list_final);
    
                                    // keep log
                                    $this->lite_b2b_insert_model->supplier_movement($customer_guid_key, '2BE81949614711ECBD8F000D3AA2838A', 'Edi_Accepted_po', 'PO', $refno_list_final);
                                }
                            }
                            // reset value to empty for another supplier
                            $exported_refno_list_final = [];
                        }
                    }
                }
            }
        } else {
            $status = 'true';
            $message = 'no new record found';
        }


        $json = array(
            'status' => $status,
            'message' => $message,
        );

        $this->response($json);
    } // end edi po

    public function upload($customer_guid, $supplier_guid, $file)
    {
        $to_shoot_url2 = 'https://api.xbridge.my/rest_b2b/index.php/Edi';
        //echo $to_shoot_url2;die;

        $data2 =   array(
            'upload_edi' => new CURLFILE($file),
            'supplier_guid' =>  $supplier_guid,
            'customer_guid' => $customer_guid,
        );

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => $to_shoot_url2,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $data2,
        ));

        $response = curl_exec($curl);
        $output = json_decode($response);
        curl_close($curl);

        return $output;
    }

    // e matching
    public function export_edi_grn_get()
    {
        $run_ftp = $this->bridge_ftp_einv();

        $run_pending_grn = $this->grn_pass_checking();
        
        $get_edi_gr_info = $this->db->query("SELECT b.*,IFNULL(c.Variance,'0') AS `Variance`
        FROM lite_b2b.`set_supplier` AS a
        INNER JOIN lite_b2b.`set_supplier_group_edi` AS b
        ON a.`supplier_guid` = b.`supplier_guid`
        AND b.`doc_type` = 'GR'
        LEFT JOIN lite_b2b.`query_outstanding_retailer` AS c
        ON b.`supplier_guid` = c.`supplier_guid`
        AND b.`customer_guid` = c.`customer_guid`
        -- AND c.`Variance` != '1'
        WHERE a.`subscribe_edi` = '1'
        AND b.`status` = '1'
        AND (c.`Variance` != '1' OR c.Variance IS NULL)
        -- AND b.`customer_guid` = '8D5B38E931FA11E79E7E33210BD612D3'
        ")->result_array();

        $supplier_invoice_data_list_temp = [];
        $found_error = false;
        $total_amount_variance = false;
        $error_message_reason = [];
        $data_log = [];
        $count = 0;
        $cc_email_list = [];
        $itemcode_list = [];


        if (count($get_edi_gr_info) > 0) {

            foreach ($get_edi_gr_info as $key => $main_value) {

                // set supplier_guid
                $supplier_guid = $main_value['supplier_guid'];
                // set customer_guid
                $customer_guid = $main_value['customer_guid'];

                $local_file_path = $this->lite_b2b_model->get_filepath_config('web', 'edi', 'main_path', 'EDP')->row('value') . $supplier_guid . '/' . $customer_guid . '/GRN/';

                $azure_file_path = $main_value['local_file_path'] . 'new/';

                $source = array_diff(scandir($main_value['local_file_path'] . 'new/'), array('..', '.'));

                foreach ($source as $key => $filename) {

                    $variance_achive = 'true'; // to check grn with supplier invoice amt
                    $total_amount_variance = false;

                    $guid = $this->db->query("SELECT REPLACE(UPPER(UUID()),'-','') as guid ")->row('guid');
                    $batch_no = substr($filename, 0, strpos($filename, '.'));
                    $batch_no = explode('_', $batch_no);
                    $batch_no = end($batch_no);

                    // check batch_no
                    $check_batch_no_exits = $this->db->query("SELECT *
                    FROM lite_b2b.edi_log AS a
                    WHERE a.type = 'GRN'
                    AND a.status NOT IN('PASSED','ACCOUNT BLOCK')
                    AND a.file_name != '$filename'
                    AND a.edi_batch_no = '$batch_no'
                    AND a.customer_guid = '$customer_guid'
                    AND a.supplier_guid = '$supplier_guid'")->num_rows();
                    if ($check_batch_no_exits == 0) {

                        // check file format type
                        if (substr($filename, strpos($filename, '.') + 1) == strtolower($main_value['export_format'])) {
                            // open file
                            $file_data = file($azure_file_path . $filename);

                            // set selected mapping field
                            $selected_field = json_decode($main_value['selected_field'], true);

                            $supplier_invoice_data_list = array();
                            $selected_field_key = array();
                            $refno_list = array();
                            $invno_list = array();
                            $cross_ref = '';

                            // set selected mapping field b2b_field
                            foreach ($selected_field['selected_field'] as $key => $value) {

                                if ($value['cross_ref'] == '1') {
                                    $cross_ref = '1';
                                }
                                array_push($selected_field_key, $value['b2b_field']);
                            }

                            // check file format or separator
                            foreach ($file_data as $key => $value) {
                                // check separator == |
                                if (strpos(trim($value), '|') == true) {
                                    $line = explode('|', trim($value));
                                } else {
                                    $data_log = array(
                                        'guid' => $guid,
                                        'customer_guid' => $customer_guid,
                                        'supplier_guid' => $supplier_guid,
                                        'type' => 'GRN',
                                        'edi_batch_no' => $batch_no,
                                        'status' => 'INVALID File Format',
                                        'file_name' => $filename,
                                        'created_at' => date("Y-m-d H:i:s"),
                                        'created_by' => 'system',
                                        'error_message_reason' => 'Invoice File with Invalid Separator',
                                    );

                                    // set found error
                                    $found_error = true;
                                    break;
                                }

                                // check column equal 
                                if (count($selected_field_key) == count($line)) {

                                    $supplier_invoice_data_list_temp[$batch_no][] = array_combine(array_values($selected_field_key), array_values($line));
                                } else {

                                    $data_log = array(
                                        'guid' => $guid,
                                        'customer_guid' => $customer_guid,
                                        'supplier_guid' => $supplier_guid,
                                        'type' => 'GRN',
                                        'edi_batch_no' => $batch_no,
                                        'status' => 'Invalid File Format',
                                        'file_name' => $filename,
                                        'created_at' => date("Y-m-d H:i:s"),
                                        'created_by' => 'system',
                                        'error_message_reason' => 'Invoice File with Invalid Column',
                                    );

                                    // set found error
                                    $found_error = true;
                                    break;
                                }

                                $supplier_invoice_data_list[$supplier_guid][$customer_guid] = $supplier_invoice_data_list_temp[$batch_no];
                            }

                            // if foreach file format or seperator found error run next record
                            if ($found_error == true) {

                                // insert log to edi_log
                                $this->db->replace('lite_b2b.edi_log', $data_log);

                                // send email
                                $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                                // move file to another directory
                                $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                                // reset to default
                                $found_error = false;
                                continue;
                            }

                            // set tempory refno list and invno list
                            foreach ($supplier_invoice_data_list_temp[$batch_no] as $key => $value) {

                                array_push($refno_list, $value['InvRefno']);

                                array_push($invno_list, $value['InvNo']);

                                array_push($itemcode_list, $value['Itemcode']);
                            }

                            // remove duplicate value
                            $refno_list = array_unique($refno_list);
                            $invno_list = array_unique($invno_list);

                            // check contain multiple PO refno in one invoice
                            if (count($refno_list) == 1) {
                                $po_refno = $supplier_invoice_data_list_temp[$batch_no][0]['InvRefno'];
                            } else {
                                $data_log = array(
                                    'guid' => $guid,
                                    'customer_guid' => $customer_guid,
                                    'supplier_guid' => $supplier_guid,
                                    'type' => 'GRN',
                                    'edi_batch_no' => $batch_no,
                                    'status' => 'Invalid File Format',
                                    'file_name' => $filename,
                                    'created_at' => date("Y-m-d H:i:s"),
                                    'created_by' => 'system',
                                    'error_message_reason' => 'Invoice File with Multiple Purchase Orders',
                                    'remark' => json_encode($refno_list),
                                );
                                $this->db->replace('lite_b2b.edi_log', $data_log);

                                // send email
                                $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                                // move file to another directory
                                $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                                $supplier_invoice_data_list_temp = [];
                                continue;
                            }

                            // check  contain multiple invoice no in one invoice
                            if (count($invno_list) == 1) {
                                $invno = $supplier_invoice_data_list_temp[$batch_no][0]['InvNo'];
                            } else {
                                $data_log = array(
                                    'guid' => $guid,
                                    'customer_guid' => $customer_guid,
                                    'supplier_guid' => $supplier_guid,
                                    'type' => 'GRN',
                                    'edi_batch_no' => $batch_no,
                                    'status' => 'Invalid File Format',
                                    'file_name' => $filename,
                                    'created_at' => date("Y-m-d H:i:s"),
                                    'created_by' => 'system',
                                    'error_message_reason' => 'Invoice File with multiple Invoice Numbers',

                                );
                                $this->db->replace('lite_b2b.edi_log', $data_log);
                                // send email
                                $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                                // move file to another directory
                                $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                                $supplier_invoice_data_list_temp = [];
                                continue;
                            }

                            // check itemcode contain value blank
                            if (in_array('', $itemcode_list)) {
                                $data_log = array(
                                    'guid' => $guid,
                                    'customer_guid' => $customer_guid,
                                    'supplier_guid' => $supplier_guid,
                                    'type' => 'GRN',
                                    'edi_batch_no' => $batch_no,
                                    'status' => 'Invalid File Format',
                                    'file_name' => $filename,
                                    'created_at' => date("Y-m-d H:i:s"),
                                    'created_by' => 'system',
                                    'error_message_reason' => 'Invalid Item Code',
                                );
                                // insert log to edi_log
                                $this->db->replace('lite_b2b.edi_log', $data_log);

                                // send email
                                $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                                // move file to another directory
                                $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                                // reset to default
                                $supplier_invoice_data_list_temp = [];
                                $itemcode_list = [];
                                continue;
                            }

                            // get po info
                            $check_po_valid =  $this->db->query("SELECT a.`RefNo`,a.`status`,a.`customer_guid`
                            FROM b2b_summary.`pomain_info` AS a
                            WHERE a.`RefNo` = '$po_refno'
                            AND a.`customer_guid` = '" . $main_value['customer_guid'] . "'")->result_array();

                            // check PO refno is valid or no and cannot more than one PO refno
                            if (count($check_po_valid) > 0) {

                                // get grn data
                                $get_grn_data = $this->db->query("SELECT a.`status`,a.`refno`,a.`supplier_code`,a.`InvNo`,a.`DONo`,a.`gr_json_info`,a.PORefNo
                                FROM b2b_summary.`grmain_info` AS a
                                WHERE a.`PORefno` = '$po_refno'
                                AND a.`customer_guid` = '" . $main_value['customer_guid'] . "'")->result_array();

                                // cannot get result from PORefno check InvNo
                                // comment for when wrong invno and worry get others grn value to proceed einvoice 25/07/2023
                                // if (count($get_grn_data) == 0) {
                                //     $get_grn_data = $this->db->query("SELECT a.`status`,a.`refno`,a.`supplier_code`,a.`InvNo`,a.`gr_json_info`,a.PORefNo
                                //     FROM b2b_summary.`grmain_info` AS a
                                //     WHERE a.`InvNo` = '$invno'
                                //     AND a.`customer_guid` = '" . $main_value['customer_guid'] . "'")->result_array();
                                // }


                                #############################################
                                # Step 2 - E-Invoice Matching
                                ############################################
                                // check have grn or no 
                                if (count($get_grn_data) > 0) {
                                    // check outstanding payment
                                    if ($main_value['Variance'] == '1') {
                                        $data_log = array(
                                            'guid' => $guid,
                                            'customer_guid' => $customer_guid,
                                            'supplier_guid' => $supplier_guid,
                                            'type' => 'GRN',
                                            'edi_batch_no' => $batch_no,
                                            'status' => 'ACCOUNT BLOCK',
                                            'file_name' => $filename,
                                            'refno' => json_encode($get_grn_data[0]['refno']),
                                            'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                            'created_by' => 'system',
                                            'updated_at' => date("Y-m-d H:i:s"),
                                            'updated_by' => 'system',
                                            'error_message_reason' => 'ACCOUNT BLOCK',
                                        );

                                        $this->db->replace('lite_b2b.edi_log', $data_log);
                                        continue;
                                    } else {

                                        // set gr json info
                                        $grn_json = json_decode($get_grn_data[0]['gr_json_info'], true);

                                        // check this grn is generated or no
                                        if ($get_grn_data[0]['status'] == 'Invoice Generated') {
                                            $data_log = array(
                                                'guid' => $guid,
                                                'customer_guid' => $customer_guid,
                                                'supplier_guid' => $supplier_guid,
                                                'type' => 'GRN',
                                                'edi_batch_no' => $batch_no,
                                                'status' => 'UNMATCHED',
                                                'file_name' => $filename,
                                                'refno' => json_encode($get_grn_data[0]['refno']),
                                                'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                'created_by' => 'system',
                                                'updated_at' => date("Y-m-d H:i:s"),
                                                'updated_by' => 'system',
                                                'error_message_reason' => 'Invoice Already Generated',
                                            );
                                            $this->db->replace('lite_b2b.edi_log', $data_log);

                                            // send email
                                            // $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                                            // move file to another directory
                                            $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);
                                            continue;
                                        }
                                        // check have contain GRDA or no
                                        else if ($grn_json['grmain_dncn'] != [] && $main_value['grn_amt_setup'] == '0') {

                                            $data_log = array(
                                                'guid' => $guid,
                                                'customer_guid' => $customer_guid,
                                                'supplier_guid' => $supplier_guid,
                                                'type' => 'GRN',
                                                'edi_batch_no' => $batch_no,
                                                'status' => 'UNMATCHED',
                                                'file_name' => $filename,
                                                'refno' => json_encode($get_grn_data[0]['refno']),
                                                'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                'created_by' => 'system',
                                                'updated_at' => date("Y-m-d H:i:s"),
                                                'updated_by' => 'system',
                                                'error_message_reason' => 'GRDA Exist',
                                            );
                                            $this->db->replace('lite_b2b.edi_log', $data_log);

                                            // send email
                                            // $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                                            // move file to another directory
                                            $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);
                                            continue;
                                        }
                                        // Do GRN Matching 
                                        else {

                                            if (round($grn_json['grmain'][0]['total_include_tax'], 2) != round(array_sum(array_column($supplier_invoice_data_list[$supplier_guid][$customer_guid], 'TotalPrice')), 2)) {
                                                $total_amount_variance = true;

                                                if($main_value['grn_amt_setup'] == '1')
                                                {
                                                    $variance_amt = $main_value['grn_amt_variance'];

                                                    $minus_total_price = abs(round($grn_json['grmain'][0]['total_include_tax'], 2) - 
                                                    round(array_sum(array_column($supplier_invoice_data_list[$supplier_guid][$customer_guid], 'TotalPrice')), 2));
                                                    
                                                    if($minus_total_price > $variance_amt)
                                                    {
                                                        $variance_achive = 'true';
                                                    }
                                                    else
                                                    {
                                                        $variance_achive = 'false';
                                                    }
                                                }
                                            }
                                            // check cross_ref itemcode
                                            if ($cross_ref == '1') {
                                                // set temp supplier item code to array
                                                $supplier_itemcode_list = array_column($supplier_invoice_data_list[$supplier_guid][$customer_guid], 'Itemcode');

                                                // covert array to string
                                                $supplier_itemcode_in =  "'" . implode("','", $supplier_itemcode_list) . "'";

                                                // get backend itemcode
                                                $supplier_itemcode_list = $this->db->query("SELECT a.`b2b_item_code` as data
                                                FROM b2b_summary.`itemmaster_info` AS a
                                                INNER JOIN lite_b2b.`set_supplier_group` AS b
                                                ON a.`supplier_guid` = b.`supplier_guid`
                                                AND b.`customer_guid` = '$customer_guid'
                                                AND b.`supplier_guid` = '$supplier_guid'
                                                INNER JOIN b2b_summary.`supplier_itemmaster_info` AS c
                                                ON a.`supplier_itemmaster_guid` = c.`guid`
                                                WHERE c.`supplier_item_code` IN($supplier_itemcode_in)
                                                AND c.validity_start_date <= NOW()
                                                AND c.validity_end_date >= NOW()")->result_array();

                                                // only return data without index
                                                $supplier_itemcode_list = array_column($supplier_itemcode_list, 'data');
                                            } else {
                                                // set temp supplier item code to array
                                                $supplier_itemcode_list = array_column($supplier_invoice_data_list[$supplier_guid][$customer_guid], 'Itemcode');
                                            }

                                            foreach ($supplier_invoice_data_list[$supplier_guid][$customer_guid] as $key1 => $supplier_invoice_data) {

                                                foreach ($grn_json['grchild'] as $key3 => $portal_grchild_data) {
                                                    // echo $count++;

                                                    // if (array_key_exists('Itemcode', $portal_grchild_data) == true && array_search($supplier_invoice_data['Itemcode'], $portal_grchild_data) == true) {
                                                    if (array_key_exists('Itemcode', $portal_grchild_data) == true) {

                                                        if (in_array($portal_grchild_data['Itemcode'], $supplier_itemcode_list)) {

                                                            // check qty
                                                            if ($supplier_invoice_data['Itemcode'] == $portal_grchild_data['Itemcode'] && $supplier_invoice_data['Qty'] != $portal_grchild_data['Qty']) {

                                                                if ($supplier_invoice_data['Qty'] <= $portal_grchild_data['Qty']) {

                                                                    $error_message_reason[$portal_grchild_data['Itemcode']][] = array(
                                                                        'Itemcode' => $portal_grchild_data['Itemcode'],
                                                                        'message' => 'Itemcode: ' . $supplier_invoice_data['Itemcode'] . ' Supplier Qty: ' . $supplier_invoice_data['Qty'] . ' less than Portal Qty: ' . $portal_grchild_data['Qty'],
                                                                        'reason' => 'INV Qty < GRN Qty',
                                                                    );
                                                                } elseif ($supplier_invoice_data['Qty'] >= $portal_grchild_data['Qty']) {

                                                                    $error_message_reason[$portal_grchild_data['Itemcode']][] = array(
                                                                        'Itemcode' => $portal_grchild_data['Itemcode'],
                                                                        'message' => 'Itemcode: ' . $supplier_invoice_data['Itemcode'] . ' Supplier Qty: ' . $supplier_invoice_data['Qty'] . ' more than Portal Qty: ' . $portal_grchild_data['Qty'],
                                                                        'reason' => 'INV Qty > GRN Qty',
                                                                    );
                                                                }

                                                                if (count($error_message_reason) > 0) {

                                                                    $data_log = array(
                                                                        'guid' => $guid,
                                                                        'customer_guid' => $customer_guid,
                                                                        'supplier_guid' => $supplier_guid,
                                                                        'type' => 'GRN',
                                                                        'edi_batch_no' => $batch_no,
                                                                        'status' => 'MATCHED with Errors',
                                                                        'file_name' => $filename,
                                                                        'refno' => json_encode($get_grn_data[0]['refno']),
                                                                        'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                                        'created_by' => 'system',
                                                                        'updated_at' => date("Y-m-d H:i:s"),
                                                                        'updated_by' => 'system',
                                                                        'error_message_reason' => 'INVALID Qty',
                                                                        'remark' => json_encode($error_message_reason),
                                                                    );
                                                                    $found_error = true;
                                                                    break;
                                                                }
                                                            }

                                                            // edi setup if variance exceed the limit.
                                                            if($variance_achive == 'true')
                                                            {
                                                                // check unit price
                                                                if ($supplier_invoice_data['Itemcode'] == $portal_grchild_data['Itemcode'] && $supplier_invoice_data['UnitPrice'] != $portal_grchild_data['NetUnitPrice']) {
                                                                    // UnitPrice
                                                                    if ($supplier_invoice_data['UnitPrice'] <= $portal_grchild_data['NetUnitPrice']) {

                                                                        $error_message_reason[$portal_grchild_data['Itemcode']][] = array(
                                                                            'Itemcode' => $portal_grchild_data['Itemcode'],
                                                                            'message' => 'Itemcode: ' . $supplier_invoice_data['Itemcode'] . ' Supplier UnitPrice: ' . $supplier_invoice_data['UnitPrice'] . ' less than Portal NetUnitPrice: ' . $portal_grchild_data['NetUnitPrice'],
                                                                            'reason' => 'INV Unit Price < GRN NET Unit Price',
                                                                        );
                                                                    } elseif ($supplier_invoice_data['UnitPrice'] >= $portal_grchild_data['NetUnitPrice']) {

                                                                        $error_message_reason[$portal_grchild_data['Itemcode']][] = array(
                                                                            'Itemcode' => $portal_grchild_data['Itemcode'],
                                                                            'message' =>  'Itemcode: ' . $supplier_invoice_data['Itemcode'] . ' Supplier UnitPrice: ' . $supplier_invoice_data['UnitPrice'] . ' more than Portal NetUnitPrice: ' . $portal_grchild_data['NetUnitPrice'],
                                                                            'reason' => 'INV Unit Price > GRN NET Unit Price',
                                                                        );
                                                                    }

                                                                    if (count($error_message_reason) > 0) {

                                                                        $data_log = array(
                                                                            'guid' => $guid,
                                                                            'customer_guid' => $customer_guid,
                                                                            'supplier_guid' => $supplier_guid,
                                                                            'type' => 'GRN',
                                                                            'edi_batch_no' => $batch_no,
                                                                            'status' => 'MATCHED with Errors',
                                                                            'file_name' => $filename,
                                                                            'refno' => json_encode($get_grn_data[0]['refno']),
                                                                            'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                                            'created_by' => 'system',
                                                                            'updated_at' => date("Y-m-d H:i:s"),
                                                                            'updated_by' => 'system',
                                                                            'error_message_reason' => 'INVALID Net Unit Price',
                                                                            'remark' => json_encode($error_message_reason),
                                                                        );
                                                                        $found_error = true;
                                                                        break;
                                                                    }
                                                                }
                                                                // check sub totol price
                                                                if ($supplier_invoice_data['Itemcode'] == $portal_grchild_data['Itemcode'] && $supplier_invoice_data['TotalPrice'] != $portal_grchild_data['TotalPrice']) {
                                                                    // TotalPrice
                                                                    if ($supplier_invoice_data['TotalPrice'] <= $portal_grchild_data['TotalPrice']) {

                                                                        $error_message_reason[$portal_grchild_data['Itemcode']][] = array(
                                                                            'Itemcode' => $portal_grchild_data['Itemcode'],
                                                                            'message' => 'Itemcode: ' . $supplier_invoice_data['Itemcode'] . ' Supplier TotalPrice: ' . $supplier_invoice_data['TotalPrice'] . ' less than Portal TotalPrice: ' . $portal_grchild_data['TotalPrice'],
                                                                            'reason' => 'INV Total Price > GRN Total Price',
                                                                        );
                                                                    } elseif ($supplier_invoice_data['TotalPrice'] >= $portal_grchild_data['TotalPrice']) {

                                                                        $error_message_reason[$portal_grchild_data['Itemcode']][] = array(
                                                                            'Itemcode' => $portal_grchild_data['Itemcode'],
                                                                            'message' =>  'Itemcode: ' . $supplier_invoice_data['Itemcode'] . ' Supplier TotalPrice: ' . $supplier_invoice_data['TotalPrice'] . ' more than Portal TotalPrice: ' . $portal_grchild_data['TotalPrice'],
                                                                            'reason' => 'INV Total Price > GRN Total Price',
                                                                        );
                                                                    }

                                                                    if (count($error_message_reason) > 0) {

                                                                        $data_log = array(
                                                                            'guid' => $guid,
                                                                            'customer_guid' => $customer_guid,
                                                                            'supplier_guid' => $supplier_guid,
                                                                            'type' => 'GRN',
                                                                            'edi_batch_no' => $batch_no,
                                                                            'status' => 'MATCHED with Errors',
                                                                            'file_name' => $filename,
                                                                            'refno' => json_encode($get_grn_data[0]['refno']),
                                                                            'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                                            'created_by' => 'system',
                                                                            'updated_at' => date("Y-m-d H:i:s"),
                                                                            'updated_by' => 'system',
                                                                            'error_message_reason' => ($total_amount_variance == true) ? 'INVALID Total Amount' : 'INVALID Subtotal',
                                                                            'remark' => json_encode($error_message_reason),
                                                                        );
                                                                        $found_error = true;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        } else {

                                                            // check receive qty not equal to 0
                                                            if ($portal_grchild_data['Qty'] != '0') {

                                                                $error_message_reason[$portal_grchild_data['Itemcode']][0] = array(
                                                                    'itemcode' => $portal_grchild_data['Itemcode'],
                                                                    // 'message' => 'Supplier Itemcode: ' . $supplier_invoice_data['Itemcode'] . ' Portal Itemcode: ' . $portal_grchild_data['Itemcode'],
                                                                    'message' => 'Portal Itemcode: ' . $portal_grchild_data['Itemcode'],
                                                                    'reason' => 'INVALID Itemcode',
                                                                );

                                                                $data_log = array(
                                                                    'guid' => $guid,
                                                                    'customer_guid' => $customer_guid,
                                                                    'supplier_guid' => $supplier_guid,
                                                                    'type' => 'GRN',
                                                                    'edi_batch_no' => $batch_no,
                                                                    'status' => 'MATCHED with Errors',
                                                                    'file_name' => $filename,
                                                                    'refno' => json_encode($get_grn_data[0]['refno']),
                                                                    'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                                    'created_by' => 'system',
                                                                    'updated_at' => date("Y-m-d H:i:s"),
                                                                    'updated_by' => 'system',
                                                                    'error_message_reason' => 'Invalid Item Code',
                                                                    'remark' => json_encode($error_message_reason),
                                                                );

                                                                $found_error = true;
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            if ($found_error == true) {

                                                if ($data_log['error_message_reason'] == 'Invalid Item Code') {
                                                    // send email
                                                    $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');
                                                }

                                                $this->db->replace('lite_b2b.edi_log', $data_log);

                                                $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                                                $found_error = false;

                                                $total_amount_variance = false;

                                                $error_message_reason = [];
                                            } else {
                                                // do convert e invoice
                                                $grda_refno = $get_grn_data[0]['refno'];
                                                $grn_invno = $get_grn_data[0]['InvNo'];
                                                $grn_DONo = $get_grn_data[0]['DONo'];

                                                // update grmain new einvoice - new added 25/07/23
                                                if($grn_invno != $invno)
                                                {
                                                    $remove_proposed_invno = $this->db->query("DELETE FROM b2b_summary.grmain_proposed WHERE refno = '$grda_refno' AND customer_guid = '$customer_guid'");

                                                    $grmain_proposed_array = array(
                                                        'customer_guid' => $customer_guid,
                                                        'status' => '',
                                                        'refno' => $grda_refno,
                                                        'invno' => $invno, // new einv-no
                                                        'dono' => $grn_DONo,
                                                        'docdate' => $this->db->query("select CURDATE() as naw")->row('naw'),
                                                        'created_at' => $this->db->query("select now() as naw")->row('naw'),
                                                        'created_by' => 'edi_system',
                                                        'updated_at' => $this->db->query("select now() as naw")->row('naw'),
                                                        'updated_by' => 'edi_system',
                                                    );
                                                    $this->db->insert('b2b_summary.grmain_proposed', $grmain_proposed_array);
                                        
                                                    $update_more_details = $this->db->query("UPDATE b2b_summary.grmain_proposed AS a
                                                    INNER JOIN b2b_summary.grmain AS b
                                                    ON a.customer_guid = b.customer_guid
                                                    AND a.refno = b.refno
                                                    SET
                                                    a.location = b.location
                                                    , a.grdate = b.grdate
                                                    , a.issuestamp = b.issuestamp
                                                    , a.laststamp = b.laststamp
                                                    , a.code = b.code
                                                    , a.name = b.name
                                                    WHERE a.customer_guid = '$customer_guid' 
                                                    AND a.refno = '$grda_refno'
                                                    ");
                                                }

                                                $get_grda_data = $this->db->query("SELECT a.`refno`
                                                FROM b2b_summary.`grmain_dncn_info` AS a
                                                WHERE a.`refno` = '$grda_refno'
                                                AND a.`customer_guid` = '$customer_guid'")->result_array();

                                                $check_grmain_dncn = $this->db->query("SELECT * FROM b2b_summary.grmain_dncn WHERE refno = '$grda_refno' AND customer_guid = '$customer_guid' AND status <> 'Ecn Generated'");

                                                if($variance_achive == 'false' && $check_grmain_dncn->num_rows() > 0)
                                                {
                                                    $ecn_generate_status = '';

                                                    if($check_grmain_dncn->num_rows() > 0)
                                                    {
                                                        foreach ($check_grmain_dncn->result() as $row) {
    
                                                            $ecn_data[] = array(
                                                                'e_gr_refno' => $row->RefNo,
                                                                'trans_type' => $row->transtype,
                                                                'user_guid' => 'edi_system',
                                                                'customer_guid' => $customer_guid,
                                                                'manual' => '1',
                                                                'record_log' => '1',
                                                            );
                                                            //echo json_encode($ecn_data);die;
                                        
                                                            // $url = '127.0.0.1';

                                                            $url = $this->internal_ip;
                                        
                                                            $to_shoot_url = $url . "/rest_b2b/index.php/E_document_process/generate_ecn";
                                                            //echo $to_shoot_url;die;
                                        
                                                            $cuser_name = 'ADMIN';
                                                            $cuser_pass = '1234';
                                        
                                                            $ch = curl_init($to_shoot_url);
                                                            // curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-API-KEY: " . "CODEX1234" ));
                                                            curl_setopt($ch, CURLOPT_TIMEOUT, 0);
                                                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                                                            curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
                                                            curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-Api-KEY: 123456"));
                                                            curl_setopt($ch, CURLOPT_USERPWD, "$cuser_name:$cuser_pass");
                                                            curl_setopt($ch, CURLOPT_POST, 1);
                                                            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($ecn_data));
                                                            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                                                            $result = curl_exec($ch);
                                                            $output = json_decode($result, true);
                                                            // echo $result;die;
                                                            curl_close($ch);
                                                            $ecn_generate_status = $output['status'];
                                                          
                                                            if ($ecn_generate_status == "false") {
                                                                $this->db->query("INSERT INTO einv_err_log (customer_guid,refno,error_code,error_reason,created_at,created_by) VALUES('$customer_guid', '$row->RefNo' ,'EDI_ECN_ERR','Error Generate ECN',NOW(),'b2b_system')");
                                                            }
                                                            $ecn_data = [];
                                                        }
                                                    }
                                                    //print_r($ecn_generate_status); die;
                                                    if (($check_grmain_dncn->num_rows() > 0 && $ecn_generate_status == 'true') || $check_grmain_dncn->num_rows() == 0) 
                                                    {
                                                        // do convert e invoice
                                                        //record_log is update grmain_info status to invoice generated
                                                        $data[] = array(
                                                            'e_gr_refno' => $get_grn_data[0]['refno'],
                                                            'user_guid' => 'edi_system',
                                                            'customer_guid' => $customer_guid,
                                                            'manual' => '1',
                                                            'record_log' => '1',
                                                        );

                                                        $url = $this->internal_ip;
                                                        //$url = '127.0.0.1';

                                                        $to_shoot_url = $url . "/rest_b2b/index.php/E_document_process/generate_einvoice";

                                                        $cuser_name = 'ADMIN';
                                                        $cuser_pass = '1234';

                                                        $ch = curl_init($to_shoot_url);
                                                        curl_setopt($ch, CURLOPT_TIMEOUT, 0);
                                                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                                                        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
                                                        curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-Api-KEY: 123456"));
                                                        curl_setopt($ch, CURLOPT_USERPWD, "$cuser_name:$cuser_pass");
                                                        curl_setopt($ch, CURLOPT_POST, 1);
                                                        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
                                                        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                                                        $result = curl_exec($ch);
                                                        $output = json_decode($result, true);

                                                        //close connection
                                                        curl_close($ch);

                                                        if ($output['status'] == 'true') {
                                                            $data_log = array(
                                                                'guid' => $guid,
                                                                'customer_guid' => $customer_guid,
                                                                'supplier_guid' => $supplier_guid,
                                                                'type' => 'GRN',
                                                                'edi_batch_no' => $batch_no,
                                                                'status' => 'MATCHED with INV Generated',
                                                                'file_name' => $filename,
                                                                'refno' => json_encode($get_grn_data[0]['refno']),
                                                                'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                                'created_by' => 'system',
                                                                'updated_at' => date("Y-m-d H:i:s"),
                                                                'updated_by' => 'system',
                                                            );
                                                            $this->db->replace('lite_b2b.edi_log', $data_log);

                                                            $this->move_file($azure_file_path, $local_file_path . 'matched/', $filename);
                                                        } else {
                                                            // unsucessful generate E-Invoice
                                                            $data_log = array(
                                                                'guid' => $guid,
                                                                'customer_guid' => $customer_guid,
                                                                'supplier_guid' => $supplier_guid,
                                                                'type' => 'GRN',
                                                                'edi_batch_no' => $batch_no,
                                                                'status' => 'MATCHED with INV Generated Error',
                                                                'file_name' => $filename,
                                                                'refno' => json_encode($get_grn_data[0]['refno']),
                                                                'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                                'created_by' => 'system',
                                                                'updated_at' => date("Y-m-d H:i:s"),
                                                                'updated_by' => 'system',
                                                                'error_message_reason' => $output['message'],
                                                                // 'remark' => json_encode($error_message_reason),
                                                            );
                                                            $this->db->replace('lite_b2b.edi_log', $data_log);

                                                            $this->move_file($azure_file_path, $local_file_path . 'matched/', $filename);
                                                        }
                                                        $data = [];
                                                    }
                                                    else
                                                    {
                                                        $data_log = array(
                                                            'guid' => $guid,
                                                            'customer_guid' => $customer_guid,
                                                            'supplier_guid' => $supplier_guid,
                                                            'type' => 'GRN',
                                                            'edi_batch_no' => $batch_no,
                                                            'status' => 'MATCHED with INV Generated Error',
                                                            'file_name' => $filename,
                                                            'refno' => json_encode($get_grn_data[0]['refno']),
                                                            'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                            'created_by' => 'system',
                                                            'updated_at' => date("Y-m-d H:i:s"),
                                                            'updated_by' => 'system',
                                                            'error_message_reason' => $output['message'],
                                                            // 'remark' => json_encode($error_message_reason),
                                                        );
                                                        $this->db->replace('lite_b2b.edi_log', $data_log);

                                                        $this->move_file($azure_file_path, $local_file_path . 'matched/', $filename);
                                                    }
                                                }
                                                else
                                                {
                                                    //record_log is update grmain_info status to invoice generated
                                                    $data[] = array(
                                                        'e_gr_refno' => $get_grn_data[0]['refno'],
                                                        'user_guid' => 'edi_system',
                                                        'customer_guid' => $customer_guid,
                                                        'manual' => '1',
                                                        'record_log' => '1',
                                                    );

                                                    $url = $this->internal_ip;
                                                    //$url = '127.0.0.1';

                                                    $to_shoot_url = $url . "/rest_b2b/index.php/E_document_process/generate_einvoice";

                                                    $cuser_name = 'ADMIN';
                                                    $cuser_pass = '1234';

                                                    $ch = curl_init($to_shoot_url);
                                                    curl_setopt($ch, CURLOPT_TIMEOUT, 0);
                                                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                                                    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
                                                    curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-Api-KEY: 123456"));
                                                    curl_setopt($ch, CURLOPT_USERPWD, "$cuser_name:$cuser_pass");
                                                    curl_setopt($ch, CURLOPT_POST, 1);
                                                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
                                                    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                                                    $result = curl_exec($ch);
                                                    $output = json_decode($result, true);

                                                    //close connection
                                                    curl_close($ch);

                                                    if ($output['status'] == 'true') {
                                                        $data_log = array(
                                                            'guid' => $guid,
                                                            'customer_guid' => $customer_guid,
                                                            'supplier_guid' => $supplier_guid,
                                                            'type' => 'GRN',
                                                            'edi_batch_no' => $batch_no,
                                                            'status' => 'MATCHED with INV Generated',
                                                            'file_name' => $filename,
                                                            'refno' => json_encode($get_grn_data[0]['refno']),
                                                            'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                            'created_by' => 'system',
                                                            'updated_at' => date("Y-m-d H:i:s"),
                                                            'updated_by' => 'system',
                                                        );
                                                        $this->db->replace('lite_b2b.edi_log', $data_log);

                                                        $this->move_file($azure_file_path, $local_file_path . 'matched/', $filename);
                                                    } else {
                                                        // unsucessful generate E-Invoice
                                                        $data_log = array(
                                                            'guid' => $guid,
                                                            'customer_guid' => $customer_guid,
                                                            'supplier_guid' => $supplier_guid,
                                                            'type' => 'GRN',
                                                            'edi_batch_no' => $batch_no,
                                                            'status' => 'MATCHED with INV Generated Error',
                                                            'file_name' => $filename,
                                                            'refno' => json_encode($get_grn_data[0]['refno']),
                                                            'created_at' => $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid)->row('created_at'),
                                                            'created_by' => 'system',
                                                            'updated_at' => date("Y-m-d H:i:s"),
                                                            'updated_by' => 'system',
                                                            'error_message_reason' => $output['message'],
                                                            // 'remark' => json_encode($error_message_reason),
                                                        );
                                                        $this->db->replace('lite_b2b.edi_log', $data_log);

                                                        $this->move_file($azure_file_path, $local_file_path . 'matched/', $filename);
                                                    }

                                                }
                                                
                                                $data = [];
                                            }
                                        }
                                    }
                                } else {
                                    $edi_log_data = $this->lite_b2b_model->get_edi_created_at('GRN', $filename, $customer_guid, $supplier_guid);

                                    $data_log = array(
                                        'guid' => $edi_log_data->row('guid'),
                                        'customer_guid' => $customer_guid,
                                        'supplier_guid' => $supplier_guid,
                                        'type' => 'GRN',
                                        'edi_batch_no' => $batch_no,
                                        'status' => 'PASSED',
                                        'file_name' => $filename,
                                        'created_at' => $edi_log_data->row('created_at'),
                                        'created_by' => 'system',
                                        'updated_at' => date("Y-m-d H:i:s"),
                                        'updated_by' => 'system',
                                        'error_message_reason' => 'Pending GRN',
                                        'remark' => $po_refno,
                                    );

                                    $this->db->replace('lite_b2b.edi_log', $data_log);

                                    if($main_value['export_method'] == 'SFTP')
                                    {
                                        $this->move_file($azure_file_path, $local_file_path . 'passed/', $filename);
                                    }

                                    $supplier_invoice_data_list_temp = []; // new add 30-08-2023 due to multiple PO 
                                
                                    continue;
                                }
                            } else {
                                $data_log = array(
                                    'guid' => $guid,
                                    'customer_guid' => $customer_guid,
                                    'supplier_guid' => $supplier_guid,
                                    'type' => 'GRN',
                                    'edi_batch_no' => $batch_no,
                                    'status' => 'Invalid PO Number',
                                    'file_name' => $filename,
                                    'created_at' => date("Y-m-d H:i:s"),
                                    'created_by' => 'system',
                                    'updated_at' => date("Y-m-d H:i:s"),
                                    'updated_by' => 'system',
                                    'error_message_reason' => 'Invoice File with invalid PO Number',
                                );

                                $this->db->replace('lite_b2b.edi_log', $data_log);
                                // send email
                                $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                                // move file to another directory
                                $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                                $supplier_invoice_data_list_temp = [];
                                continue;
                            }
                        } else {
                            $data_log = array(
                                'guid' => $guid,
                                'customer_guid' => $customer_guid,
                                'supplier_guid' => $supplier_guid,
                                'status' => 'INVALID File Format',
                                'type' => 'GRN',
                                'edi_batch_no' => $batch_no,
                                'file_name' => $filename,
                                'created_at' => date("Y-m-d H:i:s"),
                                'created_by' => 'system',
                                'error_message_reason' => 'Invalid File Format Type',
                            );
                            $this->db->replace('lite_b2b.edi_log', $data_log);

                            // send email
                            $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                            // move file to another directory
                            $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                            continue;
                        }
                    } else {
                        $data_log = array(
                            'guid' => $guid,
                            'customer_guid' => $customer_guid,
                            'supplier_guid' => $supplier_guid,
                            'status' => 'INVALID File Format',
                            'type' => 'GRN',
                            'edi_batch_no' => $batch_no,
                            'file_name' => $filename,
                            'created_at' => date("Y-m-d H:i:s"),
                            'created_by' => 'system',
                            'error_message_reason' => 'Duplicate Running Number',
                        );
                        $this->db->replace('lite_b2b.edi_log', $data_log);

                        // send email
                        $this->send_email($data_log['status'], $data_log['error_message_reason'], $data_log['type'], 'EDI', $supplier_guid, $customer_guid, $azure_file_path . $filename, $filename, '');

                        // move file to another directory
                        $this->move_file($azure_file_path, $local_file_path . 'invalid/', $filename);

                        continue;
                    }
                }
            }
            $status = 'true';
            $message = 'Success';
        } else {
            $status = 'true';
            $message = 'No new record found';
        }

        $json = array(
            'status' => $status,
            'message' => $message,
        );

        $this->response($json);
    }

    public function matching_report_get()
    {
        $unmatch = $this->db->query("SELECT c.acc_name,'deliverto',a.PORefno,a.refno,a.InvNo,a.gr_json_info,a.gr_json_report,b.edi_batch_no,b.status,b.error_message_reason,b.remark,b.supplier_guid,b.customer_guid,IFNULL(e.einvno,'') AS einvno
        FROM b2b_summary.grmain_info AS a
        INNER JOIN lite_b2b.edi_log AS b
        ON a.refno = CAST(JSON_UNQUOTE(b.refno)AS CHAR(20))
        AND a.customer_guid = b.customer_guid
        AND b.type = 'GRN'
        AND b.status IN('UNMATCHED','MATCHED with Errors','MATCHED with INV Generated','PASSED with Outstanding Invoice','MATCHED with INV Generated Error')
        INNER JOIN lite_b2b.acc AS c
        ON a.customer_guid = c.acc_guid
        LEFT JOIN lite_b2b.query_outstanding_retailer AS d
        ON b.supplier_guid = d.supplier_guid
        AND b.customer_guid = d.customer_guid
        LEFT JOIN b2b_summary.einv_main AS e
        ON a.refno = e.refno
        AND a.customer_guid = e.customer_guid
        -- where b.edi_batch_no = '0000014'
        WHERE (d.`Variance` != '1' OR d.Variance IS NULL)
        -- d.Variance IS NOT NULL
        AND b.updated_at >= DATE_FORMAT(CURDATE() - INTERVAL 1 DAY,'%Y-%m-%d 00:00:00')
        ORDER BY FIELD(b.status,'UNMATCHED','MATCHED with Errors','MATCHED with INV Generated') ASC,b.edi_batch_no ASC ")->result_array();
    
        $data = [];
        $status = '';
        $message = '';

        if (count($unmatch) > 0) {

            foreach ($unmatch as $key => $value) {

                if (json_decode($value['remark'], true) == null || json_decode($value['remark'], true) == '') {
                    $remark = [];
                } else {
                    $remark = json_decode($value['remark'], true);
                }

                $deliver_to = json_decode($value['gr_json_report'], true)['query1'][0]['loc_desc'];

                $einv_no = $value['einvno'];

                foreach (json_decode($value['gr_json_info'], true) as $key2 => $value2) {

                    if ($key2 == 'grchild') {

                        foreach ($value2 as $key3 => $value3) {

                            if (array_key_exists($value3['Itemcode'], $remark)) {
                                // if ($value['edi_batch_no'] == '0000011') {
                                //     print_r(json_decode($value['remark'], true)[$value3['Itemcode']][0]['reason']);
                                //     die;
                                // }
                                // print_r(json_decode($value['remark'], true)[$value3['Itemcode']][0]['reason']);
                                // die;
                                $data[$value['supplier_guid']][$value['customer_guid']][$value['edi_batch_no']][] = array(
                                    'Status' => $value['status'],
                                    // 'Rejection Reason' => $value['error_message_reason'],
                                    'Rejection Reason' => json_decode($value['remark'], true)[$value3['Itemcode']][0]['reason'],
                                    'Retailer' => $value['acc_name'],
                                    'Deliver To' => $deliver_to,
                                    'PO No' => $value['PORefno'],
                                    'GRN No' => $value['refno'],
                                    'Inv No' => $value['InvNo'],
                                    'Retailer item code' => $value3['Itemcode'],
                                    'Barcode' => $value3['barcode'],
                                    'Item Descriptions' => $value3['Description'],
                                    'PO Qty' => $value3['POQty'],
                                    'GRN Qty' => $value3['Qty'],
                                    'INV Qty' => $value3['Inv_Qty'],
                                    'GRN Unit Price' => number_format($value3['UnitPrice'], 2, '.', ','),
                                    'INV Unit Price' => number_format($value3['Inv_UnitPrice'], 2, '.', ','),
                                    'GRN Amount' => number_format($value3['TotalPrice'], 2, '.', ','),
                                    'INV Amount' => number_format($value3['Inv_TotalPrice'], 2, '.', ','),
                                    'Einv No' => $einv_no,

                                );
                            }
                            // Contain GRDA
                            elseif ($value3['reason'] != '') {
                                $data[$value['supplier_guid']][$value['customer_guid']][$value['edi_batch_no']][] = array(
                                    'Status' => $value['status'],
                                    'Rejection Reason' => $value['error_message_reason'],
                                    'Retailer' => $value['acc_name'],
                                    'Deliver To' => $deliver_to,
                                    'PO No' => $value['PORefno'],
                                    'GRN No' => $value['refno'],
                                    'Inv No' => $value['InvNo'],
                                    'Retailer item code' => $value3['Itemcode'],
                                    'Barcode' => $value3['barcode'],
                                    'Item Descriptions' => $value3['Description'],
                                    'PO Qty' => $value3['POQty'],
                                    'GRN Qty' => $value3['Qty'],
                                    'INV Qty' => $value3['Inv_Qty'],
                                    'GRN Unit Price' => number_format($value3['UnitPrice'], 2, '.', ','),
                                    'INV Unit Price' => number_format($value3['Inv_UnitPrice'], 2, '.', ','),
                                    'GRN Amount' => number_format($value3['TotalPrice'], 2, '.', ','),
                                    'INV Amount' => number_format($value3['Inv_TotalPrice'], 2, '.', ','),
                                    'Einv No' => $einv_no,
                                );
                            }
                            // Check lite_b2b.edi_log remark have value or no
                            else if ($remark == []) {
                                $data[$value['supplier_guid']][$value['customer_guid']][$value['edi_batch_no']][0] = array(
                                    'Status' => $value['status'],
                                    'Rejection Reason' => $value['error_message_reason'],
                                    'Retailer' => $value['acc_name'],
                                    'Deliver To' => $deliver_to,
                                    'PO No' => $value['PORefno'],
                                    'GRN No' => $value['refno'],
                                    'Inv No' => $value['InvNo'],
                                    'Retailer item code' => '',
                                    'Barcode' => '',
                                    'Item Descriptions' => '',
                                    'PO Qty' => '',
                                    'GRN Qty' => '',
                                    'INV Qty' => '',
                                    'GRN Unit Price' => '',
                                    'INV Unit Price' => '',
                                    'GRN Amount' => '',
                                    'INV Amount' => '',
                                    'Einv No' => $einv_no,

                                );
                            }
                        }
                    }
                }
            }
            // $this->send_email('Report', 'GRN', 'EDI', '2C15858ACD1F11E983C3000D3AA2838A', '8D5B38E931FA11E79E7E33210BD612D3', '', '', $data);
            // array_unshift($data, $header);
            // print_r(json_encode($data));
            // die;

            // declare for CSV HEADER @@@@@@@@@@@@@@@@@@@@@@@@@@@@
            $csv_header = array(
                'Status',
                'Rejection Reason',
                'Retailer',
                'Deliver To',
                'PO No',
                'GRN No',
                'Inv No',
                'Retailer item code',
                'Barcode',
                'Item Descriptions',
                'PO Qty',
                'GRN Qty',
                'INV Qty',
                'GRN Unit Price',
                'INV Unit Price',
                'GRN Amount',
                'INV Amount',
                'Einv No',
            );

            $reply_to = 'support@xbridge.my';
            $cc_email_list = [];
            $get_email_template_info = $this->lite_b2b_model->get_email_template('Report', 'GRN', 'EDI');

            foreach ($data as $supplier_guid => $main) {

                $running_number = rand();
                foreach ($main as $customer_guid => $child) {

                    $body_content = $get_email_template_info->row('body_content');
                    $table_rows = '';
                    foreach ($child as $key => $main) {
                        foreach ($main as $key => $line) {
                            if ($line['Status'] == 'UNMATCHED') {
                                $table_rows .= '<tr>
                                <td style="text-align: left; width:8%; vertical-align: center; background-color:#f25757">' . $line['Status'] . '</td>
                                <td style="text-align: left; width:7%; vertical-align: center;">' . $line['Rejection Reason'] . '</td>
                                <td style="text-align: left; width:8%; vertical-align: center;">' . $line['Deliver To'] . '</td>
                                <td style="text-align: center; width:9%; vertical-align: center;">' . $line['PO No'] . '</td>
                                <td style="text-align: center; width:7.5%; vertical-align: center;">' . $line['GRN No'] . '</td>
                                <td style="text-align: center; width:5.5%; vertical-align: center;">' . $line['Inv No'] . '</td>
                                <td style="text-align: right; width:5.5%; vertical-align: center;">' . $line['Einv No'] . '</td>
                                <td style="text-align: center; width:5%; vertical-align: center;">' . $line['Retailer item code'] . '</td>
                                <td style="text-align: center; width:7%; vertical-align: center;">' . $line['Barcode'] . '</td>
                                <td style="text-align: left; width:12.5%; vertical-align: center;">' . $line['Item Descriptions'] . '</td>
                                <td style="text-align: center; width:3%; vertical-align: center;">' . $line['PO Qty'] . '</td>
                                <td style="text-align: center; width:3%; vertical-align: center;">' . $line['GRN Qty'] . '</td>
                                <td style="text-align: center; width:3%; vertical-align: center;">' . $line['INV Qty'] . '</td>
                                <td style="text-align: right; width:4%; vertical-align: center;">' . $line['GRN Unit Price'] . '</td>
                                <td style="text-align: right; width:4%; vertical-align: center;">' . $line['INV Unit Price'] . '</td>
                                <td style="text-align: right; width:4.5%; vertical-align: center;">' . $line['GRN Amount'] . '</td>
                                <td style="text-align: right; width:4.5%; vertical-align: center;">' . $line['INV Amount'] . '</td>
                            </tr>';
                            } else if ($line['Status'] == 'MATCHED with Errors') {
                                $table_rows .= '<tr>
                                    <td style="text-align: left; width:8%; vertical-align: center; background-color:#f7b66f">' . $line['Status'] . '</td>
                                    <td style="text-align: left; width:7%; vertical-align: center;">' . $line['Rejection Reason'] . '</td>
                                    <td style="text-align: left; width:8%; vertical-align: center;">' . $line['Deliver To'] . '</td>
                                    <td style="text-align: center; width:9%; vertical-align: center;">' . $line['PO No'] . '</td>
                                    <td style="text-align: center; width:7.5%; vertical-align: center;">' . $line['GRN No'] . '</td>
                                    <td style="text-align: center; width:5.5%; vertical-align: center;">' . $line['Inv No'] . '</td>
                                    <td style="text-align: right; width:5.5%; vertical-align: center;">' . $line['Einv No'] . '</td>
                                    <td style="text-align: center; width:5%; vertical-align: center;">' . $line['Retailer item code'] . '</td>
                                    <td style="text-align: center; width:7%; vertical-align: center;">' . $line['Barcode'] . '</td>
                                    <td style="text-align: left; width:12.5%; vertical-align: center;">' . $line['Item Descriptions'] . '</td>
                                    <td style="text-align: center; width:3%; vertical-align: center;">' . $line['PO Qty'] . '</td>
                                    <td style="text-align: center; width:3%; vertical-align: center;">' . $line['GRN Qty'] . '</td>
                                    <td style="text-align: center; width:3%; vertical-align: center;">' . $line['INV Qty'] . '</td>
                                    <td style="text-align: right; width:4%; vertical-align: center;">' . $line['GRN Unit Price'] . '</td>
                                    <td style="text-align: right; width:4%; vertical-align: center;">' . $line['INV Unit Price'] . '</td>
                                    <td style="text-align: right; width:4.5%; vertical-align: center;">' . $line['GRN Amount'] . '</td>
                                    <td style="text-align: right; width:4.5%; vertical-align: center;">' . $line['INV Amount'] . '</td>
                                </tr>';
                            }
                            else {
                                $table_rows .= '<tr>
                                <td style="text-align: left; width:8%; vertical-align: center">' . $line['Status'] . '</td>
                                <td style="text-align: left; width:7%; vertical-align: center">' . $line['Rejection Reason'] . '</td>
                                <td style="text-align: left; width:8%; vertical-align: center">' . $line['Deliver To'] . '</td>
                                <td style="text-align: center; width:9%; vertical-align: center">' . $line['PO No'] . '</td>
                                <td style="text-align: center; width:7.5%; vertical-align: center">' . $line['GRN No'] . '</td>
                                <td style="text-align: center; width:5.5%; vertical-align: center">' . $line['Inv No'] . '</td>
                                <td style="text-align: right; width:5.5%; vertical-align: center;">' . $line['Einv No'] . '</td>
                                <td style="text-align: center; width:5%; vertical-align: center">' . $line['Retailer item code'] . '</td>
                                <td style="text-align: center; width:7%; vertical-align: center">' . $line['Barcode'] . '</td>
                                <td style="text-align: left; width:12.5%; vertical-align: center">' . $line['Item Descriptions'] . '</td>
                                <td style="text-align: center; width:3%; vertical-align: center">' . $line['PO Qty'] . '</td>
                                <td style="text-align: center; width:3%; vertical-align: center">' . $line['GRN Qty'] . '</td>
                                <td style="text-align: center; width:3%; vertical-align: center">' . $line['INV Qty'] . '</td>
                                <td style="text-align: right; width:4%; vertical-align: center">' . $line['GRN Unit Price'] . '</td>
                                <td style="text-align: right; width:4%; vertical-align: center">' . $line['INV Unit Price'] . '</td>
                                <td style="text-align: right; width:4.5%; vertical-align: center">' . $line['GRN Amount'] . '</td>
                                <td style="text-align: right; width:4.5%; vertical-align: center">' . $line['INV Amount'] . '</td>
                            </tr>';
                            }

                            // else if ($line['Einv No'] != '' && $line['Status'] == 'MATCHED with INV Generated') {

                            //     $get_email_template_info = $this->lite_b2b_model->get_email_template('Report Success Generated', 'GRN', 'EDI');
                            //     $body_content = $get_email_template_info->row('body_content');

                            //     $table_rows .= '<tr>
                            //     <td style="text-align: left;vertical-align: center">' . $line['Status'] . '</td>
                            //     <td style="text-align: left;vertical-align: center">' . $line['Deliver To'] . '</td>
                            //     <td style="text-align: center;vertical-align: center">' . $line['PO No'] . '</td>
                            //     <td style="text-align: center;vertical-align: center">' . $line['GRN No'] . '</td>
                            //     <td style="text-align: center;vertical-align: center">' . $line['Inv No'] . '</td>
                            //     <td style="text-align: center;vertical-align: center">' . $line['Einv No'] . '</td>
                            //     </tr>';
                            // } 
                        }
                    }


                    $retailer_name = $this->db->query("SELECT a.`acc_name`
                    FROM lite_b2b.`acc` AS a
                    WHERE a.`acc_guid` = '$customer_guid'")->row('acc_name');

                    $replace_key = ['%current_date%', '%retailer%', '%table_rows%'];
                    $replace_value = [date('Y-m-d'), $retailer_name, $table_rows];
                    $content = str_replace($replace_key, $replace_value, $body_content);

                    // print_r($content); die;

                    $this->load->library('Edi_invoice_report');
                    $pdf = new Edi_invoice_report('L', 'mm', 'A4', true, 'UTF-8', false);
                    $pdf->SetTitle($get_email_template_info->row('mail_subject'));
                    $pdf->SetAuthor('B2B');
                    $pdf->SetDisplayMode('real', 'default');
                    $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
                    $pdf->SetAutoPageBreak(true, PDF_MARGIN_BOTTOM);
                    $pdf->setPageUnit('pt');
                    $pdf->setPrintHeader(false);
                    $pdf->setPrintFooter(false);
                    $font_size = $pdf->pixelsToUnits('7.5');
                    $pdf->SetFont('times', '', $font_size, '', 'default', true);
                    $pdf->AddPage('L', 'A4');

                    $html = $content;

                    $pdf->writeHTML($html, true, false, true, false, '');

                    $pdf->lastPage();
                    ob_end_clean();
                    // $pdf->Output($_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/" . 'TEST' . $running_number . '.pdf', 'I');
                    // $local_file_path = "/media/b2b/rexbridge-b2b.com/edi/" . $supplier_guid . "/" . $customer_guid . "/GRN/Daily_report/";
                    $file_name = 'Daily Invoice Matching Report-' . date("Y-m-d H:i:s") . '.pdf';

                    $local_file_path = $this->lite_b2b_model->get_filepath_config('web', 'edi', 'main_path', 'EDP')->row('value') . $supplier_guid . '/' . $customer_guid . '/GRN/daily_report/';

                    $supplier_array_file = explode('/', substr($local_file_path, 0, -1));

                    $file_path_string = '';

                    // check path exists
                    foreach ($supplier_array_file as $row) {
                        $file_path_string .= $row . '/';

                        if (!file_exists($file_path_string)) {
                            mkdir($file_path_string, 0777, true);
                            chmod($file_path_string, 0777);
                        }
                    }

                    $pdf->Output($local_file_path . $file_name, 'F');

                    // CSV FILE HERE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                    $csv_name = 'Daily Invoice Matching Report-' . date("Y-m-d H:i:s") . '.csv';
                    // $file_csv_name = $_SERVER["DOCUMENT_ROOT"] . "/rest_b2b/uploads/" . $csv_name;
        
                    $file_csv_name = $this->lite_b2b_model->get_filepath_config('web', 'edi', 'main_path', 'EDP')->row('value') . $supplier_guid . '/' . $customer_guid . '/GRN/daily_report/' . $csv_name;
        
                    $file_csv = fopen($file_csv_name, "x");
        
                    fputcsv($file_csv, $csv_header);
        
                    foreach ($data as $csv_key => $csv_main) {
                        foreach ($csv_main as $csv_key2 => $csv_child) {
                            foreach ($csv_child as $csv_key3 => $csv_line) {
                                foreach($csv_line as $value)
                                {
                                    fputcsv($file_csv, $value);
                                }
                            }
                        }
                    }
                    fclose($file_csv);

                    // END CSV HERE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                    $get_email_list = $this->lite_b2b_model->get_email_user_list($supplier_guid, $customer_guid, 'EDI')->result_array();

                    // $get_email_list = $this->db->query("SELECT a.`type`,a.`email_group_name`,a.`description`,b.`customer_guid`,b.`supplier_guid`,b.`user_email`,b.`cc_email`
                    // FROM lite_b2b.`set_email` AS a
                    // INNER JOIN lite_b2b.`set_email_group` AS b
                    // ON a.`guid` = b.`email_group_guid`
                    // WHERE a.`type` = 'GRN'
                    // AND a.`email_group_name` = 'EDI'
                    // AND b.`supplier_guid` = '$supplier_guid'
                    // AND b.`customer_guid` = '$customer_guid'
                    // AND b.`is_active` = '1'
                    // AND b.user_email = 'xytai@xbridge.my'")->result_array(); 
                    // xytai@xbridge.my jiangrui.goh@pandasoftware.my

                    $email_header = $this->lite_b2b_model->get_filepath_config('web', 'email_temp', 'header_val', 'EHTMP')->row('value');

                    $email_footer = $this->lite_b2b_model->get_filepath_config('web', 'email_temp', 'footer_val', 'EFTMP')->row('value');

                    $file_pdf = array(
                        'file_pdf' => $local_file_path .  $file_name,
                    );

                    $file_csv =  array(
                        'file_csv' => $local_file_path . $csv_name,
                    ); 

                    $file_array = array_merge($file_pdf,$file_csv);

                    // send email by each
                    foreach ($get_email_list as $key => $value) {
                        // if ($value['category'] == 'to') {
                        //     $to_email = $value['user_email'];
                        // } else {
                        //     $cc_email_list[] =  $value['user_email'];
                        // }
                        // $to_email = $value['user_email'];

                        // if ($value['cc_email'] != '' || $value['cc_email'] != null) {
                        //     $cc_email_list =  explode(',', $value['cc_email']);
                        // }
                        $to_email = $value['user_email'];

                        if ($value['cc_email'] != '' || $value['cc_email'] != null) {
                            $cc_email_list =  explode(',', $value['cc_email']);
                        } else {
                            $cc_email_list = '';
                        }

                        // send email to user
                        $status = $this->general_model->send_mailjet_third_party_multiple_attachment(
                            $to_email,
                            '',
                            $email_header . $content . $email_footer,
                            $get_email_template_info->row('mail_subject'),
                            '',
                            $cc_email_list,
                            $file_array,
                            $reply_to,
                            $file_name
                        );
                    }
                    if ($status == 200) {
                        unlink($local_file_path .  $file_name);
                        unlink($local_file_path .  $csv_name);
                        $status = 'true';
                        $message = 'Sucessful generate daily report';
                    } else {
                        $status = 'true';
                        $message = 'Unsucessful generate daily report';
                    }
                }
            }
        } else {
            $status = 'true';
            $message = 'No data found';
        }



        $json = array(
            'status' => $status,
            'message' => $message,
        );

        $this->response($json);
    }
    
    public function reflag_edi_export_status_post()
    {
        $refno = $this->input->post('refno');
        $type = $this->input->post('type');
        $customer_guid = $this->input->post('customer_guid');
        $user_guid = $this->input->post('user_guid');

        $status = '';
        $message = '';

        if ($type == 'PO') {
            $refno_in = implode("','", $refno);

            $refno_in = "'" . $refno_in . "'";

            $this->db->query("UPDATE b2b_summary.pomain_info
            SET export_status = '0'
            WHERE RefNo IN ($refno_in)
            AND customer_guid = '$customer_guid' ");

            if ($this->db->affected_rows() > 0) {
                $status = 'true';
                $message = 'Success';

                $guid = $this->db->query("SELECT REPLACE(UPPER(UUID()),'-','') as guid ")->row('guid');
                $now =  $this->db->query("SELECT NOW() as now")->row('now');

                $log = array(
                    'guid' => $guid,
                    'customer_guid' => $customer_guid,
                    'type' => $type,
                    'refno' => json_encode($refno),
                    'created_at' => $now,
                    'created_by' => $user_guid,
                    'updated_at' => $now,
                    'updated_by' =>  $user_guid,
                );

                $this->db->insert('lite_b2b.flag_edi_log', $log);
            } else {
                $status = 'false';
                $message = 'Unsucces';
            }
        }

        $json = array(
            'status' => $status,
            'message' => $message,
        );

        $this->response($json);
    }

    public function ftp_direct($host, $port, $username, $password, $local_file_path, $remote_file_path)
    {
        // check connection to client host
        $connection = ssh2_connect($host, intval($port));
        if ($connection === FALSE) {

            $response = array('status' => 'FAIL', 'message' => 'Fail connect client Host',);
        } else {

            // $response = array('status' => 'SUCCESS', 'message' => 'SUCCESS connect client Host',);

            // login client SFTP
            $state = ssh2_auth_password($connection, $username, $password);
            if ($state === FALSE) {

                $response = array('status' => 'FAIL', 'message' => 'Fail login in SFTP,username or passowrd invalid',);
            } else {

                // $response = array('status' => 'SUCCESS', 'message' => 'SUCCESS login in SFTP',);
                // $stream = ssh2_exec($connection, 'pwd');
                // stream_set_blocking($stream, true);
                // $stream_out = ssh2_fetch_stream($stream, SSH2_STREAM_STDIO);
                // $remote_file = stream_get_contents($stream_out) . '/application/csv/';
                // echo str_replace('', ' ', $remote_file);
                // die;

                // send file to client
                $send = ssh2_scp_send($connection, $local_file_path, $remote_file_path,   0644);
                // $send = ssh2_scp_send($connection, $local_file_path, str_replace(' ', '', $remote_file),   0644);

                if ($send === FALSE) {

                    $response = array('status' => 'FAIL', 'message' => 'Fail send file to client',);
                } else {

                    $response = array('status' => 'SUCCESS', 'message' => 'SUCCESS send file to client',);
                }
            }
        }

        // $state = ssh2_auth_password($connection, 'webdev', 'Panda@Web$4321');

        ssh2_exec($connection, 'exit');
        // unset($connection);

        return $response;
    }

    public function move_file($from_destination, $to_destination, $file)
    {
        $supplier_array_file = explode('/', substr($to_destination, 0, -1));

        $file_path_string = '';

        // check path exists
        foreach ($supplier_array_file as $row) {
            $file_path_string .= $row . '/';

            if (!file_exists($file_path_string)) {
                mkdir($file_path_string, 0777, true);
                chmod($file_path_string, 0777);
            }
        }

        $result_copy = copy($from_destination . $file, $to_destination . $file);

        // Check copy success or no
        if ($result_copy == true) {

            $result_remove = unlink($from_destination . $file);
            // check remove previous file
            if ($result_remove == true) {

                return 'true';
            } else {

                return 'false';
            }
        } else {

            return 'false';
        }
    }

    public function send_email($status, $description, $type, $mail_type, $supplier_guid, $customer_guid, $attachment_file_path, $filename)
    {

        $reply_to = 'support@xbridge.my';
        $cc_email_list = [];

        $get_email_template_info = $this->lite_b2b_model->get_email_template($description, $type, $mail_type);
        
        if($status != 'MATCHED with Errors')
        {
            if($status == 'Invalid File Format')
            {
                $get_email_list = $this->lite_b2b_model->get_email_user_list($supplier_guid, $customer_guid , 'EDI_FILE_ERROR')->result_array();
    
                if(count($get_email_list) == 0)
                {
                    $get_email_list = $this->lite_b2b_model->get_email_user_list($supplier_guid, $customer_guid, 'EDI')->result_array();
                }
            }
            else if($status == 'Invalid PO Number')
            {
                $get_email_list = $this->lite_b2b_model->get_email_user_list($supplier_guid, $customer_guid , 'EDI_PO_ERROR')->result_array();
    
                if(count($get_email_list) == 0)
                {
                    $get_email_list = $this->lite_b2b_model->get_email_user_list($supplier_guid, $customer_guid, 'EDI')->result_array();
                }
            }
            else
            {
                $get_email_list = $this->lite_b2b_model->get_email_user_list($supplier_guid, $customer_guid, 'EDI')->result_array();
            }
    
            $email_header = $this->lite_b2b_model->get_filepath_config('web', 'email_temp', 'header_val', 'EHTMP')->row('value');
    
            $email_footer = $this->lite_b2b_model->get_filepath_config('web', 'email_temp', 'footer_val', 'EFTMP')->row('value');
    
            $retailer_name = $this->db->query("SELECT a.acc_name
                    FROM lite_b2b.acc AS a
                    WHERE a.acc_guid = '$customer_guid'")->row('acc_name');
    
            if(count($get_email_list) > 0)
            {
                // send email by each
                foreach ($get_email_list as $key => $value) {
        
                    $to_email = $value['user_email'];
        
                    if ($value['cc_email'] != '' || $value['cc_email'] != null) {
                        $cc_email_list =  explode(',', $value['cc_email']);
                    } else {
                        $cc_email_list = '';
                    }
        
                    $replace_key = ['%current_date%', '%retailer%', '%filename%', '%status%', '%reason%'];
                    $replace_value = [date('Y-m-d'), $retailer_name, $filename, $status, $description];
                    $content = str_replace($replace_key, $replace_value, $get_email_template_info->row('body_content'));
        
                    // send email to user
                    $result =  $this->general_model->send_mailjet_third_party(
                        $to_email,
                        '',
                        $email_header . $content . $email_footer,
                        $get_email_template_info->row('mail_subject'),
                        '',
                        $cc_email_list,
                        $attachment_file_path,
                        $reply_to,
                        $filename
                    );
                }
            }
        }
    }

    public function ftp($host, $port, $username, $password, $local_file_path, $remote_file_path, $sftp_step)
    {
        $status = '';
        $message = '';
            
        // $to_shoot_url = 'http://office.panda-eco.com:18243/rest_b2b/index.php/lite_b2b/Edi/testing_ftp_bridge';
        // if($host == 'sftpsap.dksh.com')
        // {
        //     $to_shoot_url = 'http://10.10.0.99/rest_edi/index.php/Bridge_ftp_process_testing/ftp_bridge';
        // }
        // else
        // {
            $to_shoot_url = 'http://10.10.0.99/rest_edi/index.php/Bridge_ftp_process/ftp_bridge';
        // }


        // $data_ftp = array();
        $data_ftp = array(
            'sftp_host' => $host,
            'sftp_port' => $port,
            'sftp_username' => $username,
            'sftp_password' => $password,
            'local_file_path' => $local_file_path,
            'to_destination' => $remote_file_path,
            'sftp_step' => $sftp_step,
            "file" => new CURLFile($local_file_path), // from_destination
        );

        // if($host == 'sftpsap.dksh.com')
        // {
        //     print_r($data_ftp); die;
        // }
        // print_r($data_ftp); die;

        $cuser_name = 'ADMIN';
        $cuser_pass = '1234';

        $ch = curl_init($to_shoot_url);
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-API-KEY: " . "CODEX1234" ));
        curl_setopt($ch, CURLOPT_TIMEOUT, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-Api-KEY: 123456"));
        curl_setopt($ch, CURLOPT_USERPWD, "$cuser_name:$cuser_pass");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_ftp);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $result = curl_exec($ch);
        $output = json_decode($result);
        // $status = json_encode($output);
        // print_r($output->result);die;
        // echo $result;die;
        curl_close($ch);

        if(isset($output->status))
        {
            if($output->status == 'false')
            {
                $status = 'FAIL';
                $message = 'Fail send file to client';
            }
            else
            {
                $status = 'SUCCESS';
                $message = 'SUCCESS send file to client';
            }
        }
        else
        {
            $status = 'FAIL';
            $message = 'Fail send file to client';
        }

        $json = array(
            'status' => $status,
            'message' => $message,
        );

        // $this->response($json);

        return $json;

    }

    public function test_run_einv_get()
    {
        $run_ftp = $this->grn_pass_checking();

        print_r($run_ftp); die;
    }

    public function bridge_ftp_einv()
    {
        $query_edi_data = $this->db->query("SELECT b.*,IFNULL(c.Variance,'0') AS `Variance`
        FROM lite_b2b.`set_supplier` AS a
        INNER JOIN lite_b2b.`set_supplier_group_edi` AS b
        ON a.`supplier_guid` = b.`supplier_guid`
        AND b.`doc_type` = 'GR'
        LEFT JOIN lite_b2b.`query_outstanding_retailer` AS c
        ON b.`supplier_guid` = c.`supplier_guid`
        AND b.`customer_guid` = c.`customer_guid`
        -- AND c.`Variance` != '1'
        WHERE a.`subscribe_edi` = '1'
        AND b.`status` = '1'
        AND (c.`Variance` != '1' OR c.Variance IS NULL)
        AND b.export_method = 'SFTP'
        ")->result_array();

        // AND b.guid = 'CB73ECAC08C211EE8C2E6045BD209184'

        $status = '';
        $message = '';

        // print_r($query_edi_data); die;
        if(count($query_edi_data) > 0)
        {
            foreach($query_edi_data as $key => $main_value)
            {
                $customer_guid = $main_value['customer_guid'];
                $supplier_guid = $main_value['supplier_guid'];
                $sftp_host = $main_value['sftp_host'];
                $sftp_port = $main_value['sftp_port'];
                $sftp_username = $main_value['sftp_username'];
                $sftp_password = $main_value['sftp_password'];
                $sftp_remote_path = $main_value['sftp_remote_path'];
                // $from_destination = $main_value['sftp_remote_path']; // from location
                $local_file_path = $main_value['local_file_path'].'new/'; // to location
                
                //$to_shoot_url = 'http://office.panda-eco.com:18243/rest_b2b/index.php/lite_b2b/Edi/testing_ftp_inv_bridge';
                $to_shoot_url = 'http://10.10.0.99/rest_edi/index.php/Bridge_ftp_process/ftp_inv_bridge';

                // $data_ftp = array();
                $data_ftp = array(
                    'customer_guid' => $customer_guid,
                    'supplier_guid' => $supplier_guid,
                    'sftp_host' => $sftp_host,
                    'sftp_port' => $sftp_port,
                    'sftp_username' => $sftp_username,
                    'sftp_password' => $sftp_password,
                    'sftp_remote_path' => $sftp_remote_path,
                    'local_file_path' => $local_file_path,
                    // 'from_destination' => $from_destination,
                    // 'to_destination' => $to_destination,
                );

                // print_r($data_ftp); die;

                $cuser_name = 'ADMIN';
                $cuser_pass = '1234';

                $ch = curl_init($to_shoot_url);
                // curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-API-KEY: " . "CODEX1234" ));
                curl_setopt($ch, CURLOPT_TIMEOUT, 0);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array("X-Api-KEY: 123456"));
                curl_setopt($ch, CURLOPT_USERPWD, "$cuser_name:$cuser_pass");
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $data_ftp);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                $result = curl_exec($ch);
                $output = json_decode($result);
                // $status = json_encode($output);
                // print_r($output->result);die;
                // print_r($output); die;
                // echo $result;die;
                curl_close($ch);

                if(isset($output->status))
                {
                    if($output->status == 'false')
                    {
                        $status = 'false';
                        $message = 'Process Error';
                    }
                    else
                    {
                        $status = 'true';
                        $message = 'Success';
                    }
                }
                else
                {
                    $status = 'false';
                    $message = 'Process Error';
                }

            }
        }
        else
        {
            $status = 'true';
            $message = 'No new record found';
        }

        $json = array(
            'status' => $status,
            'message' => $message,
        );

        // $this->response($json);

        return $json;

    }
    
    public function retrieve_ftp_invoice_post()
    {
        // $local_file_path = $this->input->post('local_file_path');
        // $from_destination = $this->input->post('from_destination');
        $final_to_destination = $this->input->post('final_to_destination');
        $filename = $this->input->post('filename');

        // print_r($filename); die;

        if($_FILES['file']['error'] === UPLOAD_ERR_OK) 
        {
            $supplier_array_file = explode('/', substr($final_to_destination, 0, -1));
            // print_r($supplier_array_file); die;
            $file_path_string = '';
    
            // check path exists
            foreach ($supplier_array_file as $row) {
                $file_path_string .= $row . '/';
    
                if (!file_exists($file_path_string)) {
                    mkdir($file_path_string, 0777, true);
                    chmod($file_path_string, 0777);
                }
            }

            // $fileContent = file_get_contents($_FILES['file']['tmp_name']);
            copy($_FILES['file']['tmp_name'], $final_to_destination.'/'.$filename);

            // move_uploaded_file($_FILES['file']['tmp_name'], $final_to_destination);
            
            if(file_exists($final_to_destination.'/'.$filename))
            {
                $result = array('status' => 'true', 'message' => 'SUCCESS download file from client',);
            }
            else
            {
                $result = array('status' => 'false', 'message' => 'Fail download file from client',);
            }

        } 
        else 
        {
            $result = array('status' => 'false', 'message' => 'Fail file retrieve',);
        }

        $this->response($result);
    }

    public function grn_pass_checking()
    {
        $query_data = $this->db->query("SELECT a.file_name,c.* FROM lite_b2b.edi_log a 
        INNER JOIN b2b_summary.grmain_info b
        ON a.customer_guid = b.customer_guid
        AND a.remark = b.porefno
        AND a.status = 'PASSED'
        INNER JOIN lite_b2b.`set_supplier_group_edi` c
        ON a.customer_guid = c.customer_guid
        AND a.supplier_guid = c.supplier_guid
        AND c.doc_type = 'GR'
        WHERE c.export_method = 'SFTP'")->result_array();

        // print_r($query_data); die;

        $i = 0;
        $move_status = '';
        $count_query = count($query_data);

        if(count($query_data) > 0 )
        {
            foreach($query_data as $key => $value)
            {
                $supplier_guid = $value['supplier_guid'];
                // set customer_guid
                $customer_guid = $value['customer_guid'];

                $filename = $value['file_name'];

                $local_file_path = $this->lite_b2b_model->get_filepath_config('web', 'edi', 'main_path', 'EDP')->row('value') . $supplier_guid . '/' . $customer_guid . '/GRN/';

                $azure_file_path = $value['local_file_path'] . 'new/';

                $passed_azure_file_path = $value['local_file_path'] . 'passed/';

                if(file_exists($passed_azure_file_path.$filename))
                {
                    $move_status = $this->move_file($passed_azure_file_path, $azure_file_path , $filename);

                    if($move_status == 'true')
                    {
                        $i++;
                    }
                }
                else if(file_exists($azure_file_path.$filename))
                {
                    $i++;
                }
            }
        }

        if($count_query == '0')
        {
            $json = array(
                'status' => 'true',
                'message' => 'No Data Found',
            );
        }
        else if ($count_query == $i)
        {
            $json = array(
                'status' => 'true',
                'message' => 'Success Moved File',
            );
        }
        else
        {
            $json = array(
                'status' => 'false',
                'message' => 'Failed Move File',
            );
        }

        //$this->response($json);
        return $json;

    }
}
